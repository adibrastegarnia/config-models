// Code generated by YGOT. DO NOT EDIT.
/*
Package enterprise_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/adibrastegarnia/go/pkg/mod/github.com/openconfig/ygot@v0.8.12/genutil/names.go
using the following YANG input files:
	- device-range@2020-11-18.yang
	- device-group@2020-11-18.yang
	- enterprise@2020-11-18.yang
	- site@2020-11-18.yang
	- use-case@2020-11-18.yang
	- deployment-environment@2020-11-18.yang
	- application@2020-11-18.yang
	- visibility@2020-11-18.yang
	- qos@2020-11-18.yang
Imported modules were sourced from:
	- yang/...
*/
package enterprise_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Application_Application represents the /application/application YANG schema element.
type Application_Application struct {
	Application	map[string]*Application_Application_Application	`path:"application" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// Application_Application struct. The keys of the list are populated from the input
// arguments.
func (t *Application_Application) NewApplication(Id string) (*Application_Application_Application, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*Application_Application_Application)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &Application_Application_Application{
		Id: &Id,
	}

	return t.Application[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Application_Application_Application represents the /application/application/application YANG schema element.
type Application_Application_Application struct {
	DeploymentEnvironment	*string	`path:"deployment-environment" module:"application"`
	Description	*string	`path:"description" module:"application"`
	DisplayName	*string	`path:"display-name" module:"application"`
	Endpoint	map[string]*Application_Application_Application_Endpoint	`path:"endpoint" module:"application"`
	Id	*string	`path:"id" module:"application"`
	Qos	map[string]*Application_Application_Application_Qos	`path:"qos" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application_Application) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// Application_Application_Application struct. The keys of the list are populated from the input
// arguments.
func (t *Application_Application_Application) NewEndpoint(Name string) (*Application_Application_Application_Endpoint, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*Application_Application_Application_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &Application_Application_Application_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// NewQos creates a new entry in the Qos list of the
// Application_Application_Application struct. The keys of the list are populated from the input
// arguments.
func (t *Application_Application_Application) NewQos(Qos string) (*Application_Application_Application_Qos, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Qos == nil {
		t.Qos = make(map[string]*Application_Application_Application_Qos)
	}

	key := Qos

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Qos[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Qos", key)
	}

	t.Qos[key] = &Application_Application_Application_Qos{
		Qos: &Qos,
	}

	return t.Qos[key], nil
}

// ΛListKeyMap returns the keys of the Application_Application_Application struct, which is a YANG list entry.
func (t *Application_Application_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Application_Application_Application_Endpoint represents the /application/application/application/endpoint YANG schema element.
type Application_Application_Application_Endpoint struct {
	Hostname	*string	`path:"hostname" module:"application"`
	Name	*string	`path:"name" module:"application"`
	Port	*uint16	`path:"port" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application_Application_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application_Application_Endpoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Application_Application_Application_Endpoint struct, which is a YANG list entry.
func (t *Application_Application_Application_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application_Application_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application_Application_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application_Application_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Application_Application_Application_Qos represents the /application/application/application/qos YANG schema element.
type Application_Application_Application_Qos struct {
	Allowed	*bool	`path:"allowed" module:"application"`
	Qos	*string	`path:"qos" module:"application"`
}

// IsYANGGoStruct ensures that Application_Application_Application_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Application_Application_Application_Qos) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Application_Application_Application_Qos struct, which is a YANG list entry.
func (t *Application_Application_Application_Qos) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Qos == nil {
		return nil, fmt.Errorf("nil value for key Qos")
	}

	return map[string]interface{}{
		"qos": *t.Qos,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Application_Application_Application_Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Application_Application_Application_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Application_Application_Application_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeploymentEnvironment_DeploymentEnvironment represents the /deployment-environment/deployment-environment YANG schema element.
type DeploymentEnvironment_DeploymentEnvironment struct {
	DeploymentEnvironment	map[string]*DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment	`path:"deployment-environment" module:"deployment-environment"`
}

// IsYANGGoStruct ensures that DeploymentEnvironment_DeploymentEnvironment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeploymentEnvironment_DeploymentEnvironment) IsYANGGoStruct() {}

// NewDeploymentEnvironment creates a new entry in the DeploymentEnvironment list of the
// DeploymentEnvironment_DeploymentEnvironment struct. The keys of the list are populated from the input
// arguments.
func (t *DeploymentEnvironment_DeploymentEnvironment) NewDeploymentEnvironment(Id string) (*DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeploymentEnvironment == nil {
		t.DeploymentEnvironment = make(map[string]*DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeploymentEnvironment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeploymentEnvironment", key)
	}

	t.DeploymentEnvironment[key] = &DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment{
		Id: &Id,
	}

	return t.DeploymentEnvironment[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeploymentEnvironment_DeploymentEnvironment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeploymentEnvironment_DeploymentEnvironment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeploymentEnvironment_DeploymentEnvironment) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment represents the /deployment-environment/deployment-environment/deployment-environment YANG schema element.
type DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment struct {
	ClusterName	*string	`path:"cluster-name" module:"deployment-environment"`
	Description	*string	`path:"description" module:"deployment-environment"`
	DisplayName	*string	`path:"display-name" module:"deployment-environment"`
	Id	*string	`path:"id" module:"deployment-environment"`
	Site	*string	`path:"site" module:"deployment-environment"`
}

// IsYANGGoStruct ensures that DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment struct, which is a YANG list entry.
func (t *DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeploymentEnvironment_DeploymentEnvironment_DeploymentEnvironment) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Device represents the /device YANG schema element.
type Device struct {
	Application	*Application_Application	`path:"application" module:"application"`
	DeploymentEnvironment	*DeploymentEnvironment_DeploymentEnvironment	`path:"deployment-environment" module:"deployment-environment"`
	DeviceGroup	*DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
	DeviceRange	*DeviceRange_DeviceRange	`path:"device-range" module:"device-range"`
	Enterprise	*Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
	Qos	*Qos_Qos	`path:"qos" module:"qos"`
	Site	*Site_Site	`path:"site" module:"site"`
	UseCase	*UseCase_UseCase	`path:"use-case" module:"use-case"`
	Visibility	*Visibility_Visibility	`path:"visibility" module:"visibility"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup represents the /device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup struct {
	DeviceGroup	map[string]*DeviceGroup_DeviceGroup_DeviceGroup	`path:"device-group" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// DeviceGroup_DeviceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceGroup_DeviceGroup) NewDeviceGroup(Id string) (*DeviceGroup_DeviceGroup_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*DeviceGroup_DeviceGroup_DeviceGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &DeviceGroup_DeviceGroup_DeviceGroup{
		Id: &Id,
	}

	return t.DeviceGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceGroup_DeviceGroup_DeviceGroup represents the /device-group/device-group/device-group YANG schema element.
type DeviceGroup_DeviceGroup_DeviceGroup struct {
	Description	*string	`path:"description" module:"device-group"`
	DisplayName	*string	`path:"display-name" module:"device-group"`
	Id	*string	`path:"id" module:"device-group"`
}

// IsYANGGoStruct ensures that DeviceGroup_DeviceGroup_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceGroup_DeviceGroup_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceGroup_DeviceGroup_DeviceGroup struct, which is a YANG list entry.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceGroup_DeviceGroup_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceGroup_DeviceGroup_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceRange_DeviceRange represents the /device-range/device-range YANG schema element.
type DeviceRange_DeviceRange struct {
	DeviceRange	map[string]*DeviceRange_DeviceRange_DeviceRange	`path:"device-range" module:"device-range"`
}

// IsYANGGoStruct ensures that DeviceRange_DeviceRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceRange_DeviceRange) IsYANGGoStruct() {}

// NewDeviceRange creates a new entry in the DeviceRange list of the
// DeviceRange_DeviceRange struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceRange_DeviceRange) NewDeviceRange(Id string) (*DeviceRange_DeviceRange_DeviceRange, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceRange == nil {
		t.DeviceRange = make(map[string]*DeviceRange_DeviceRange_DeviceRange)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceRange", key)
	}

	t.DeviceRange[key] = &DeviceRange_DeviceRange_DeviceRange{
		Id: &Id,
	}

	return t.DeviceRange[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceRange_DeviceRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceRange_DeviceRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceRange_DeviceRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceRange_DeviceRange_DeviceRange represents the /device-range/device-range/device-range YANG schema element.
type DeviceRange_DeviceRange_DeviceRange struct {
	DeviceGroup	map[string]*DeviceRange_DeviceRange_DeviceRange_DeviceGroup	`path:"device-group" module:"device-range"`
	DisplayName	*string	`path:"display-name" module:"device-range"`
	Enabled	*bool	`path:"enabled" module:"device-range"`
	Enterprise	*string	`path:"enterprise" module:"device-range"`
	Id	*string	`path:"id" module:"device-range"`
	ImsiRangeFrom	*uint64	`path:"imsi-range-from" module:"device-range"`
	ImsiRangeTo	*uint64	`path:"imsi-range-to" module:"device-range"`
	ImsiWildcard	*string	`path:"imsi-wildcard" module:"device-range"`
	Priority	*uint32	`path:"priority" module:"device-range"`
}

// IsYANGGoStruct ensures that DeviceRange_DeviceRange_DeviceRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceRange_DeviceRange_DeviceRange) IsYANGGoStruct() {}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// DeviceRange_DeviceRange_DeviceRange struct. The keys of the list are populated from the input
// arguments.
func (t *DeviceRange_DeviceRange_DeviceRange) NewDeviceGroup(DeviceGroup string) (*DeviceRange_DeviceRange_DeviceRange_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*DeviceRange_DeviceRange_DeviceRange_DeviceGroup)
	}

	key := DeviceGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &DeviceRange_DeviceRange_DeviceRange_DeviceGroup{
		DeviceGroup: &DeviceGroup,
	}

	return t.DeviceGroup[key], nil
}

// ΛListKeyMap returns the keys of the DeviceRange_DeviceRange_DeviceRange struct, which is a YANG list entry.
func (t *DeviceRange_DeviceRange_DeviceRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceRange_DeviceRange_DeviceRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceRange_DeviceRange_DeviceRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceRange_DeviceRange_DeviceRange) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// DeviceRange_DeviceRange_DeviceRange_DeviceGroup represents the /device-range/device-range/device-range/device-group YANG schema element.
type DeviceRange_DeviceRange_DeviceRange_DeviceGroup struct {
	Allowed	*bool	`path:"allowed" module:"device-range"`
	DeviceGroup	*string	`path:"device-group" module:"device-range"`
}

// IsYANGGoStruct ensures that DeviceRange_DeviceRange_DeviceRange_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DeviceRange_DeviceRange_DeviceRange_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the DeviceRange_DeviceRange_DeviceRange_DeviceGroup struct, which is a YANG list entry.
func (t *DeviceRange_DeviceRange_DeviceRange_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DeviceGroup == nil {
		return nil, fmt.Errorf("nil value for key DeviceGroup")
	}

	return map[string]interface{}{
		"device-group": *t.DeviceGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DeviceRange_DeviceRange_DeviceRange_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DeviceRange_DeviceRange_DeviceRange_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DeviceRange_DeviceRange_DeviceRange_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise represents the /enterprise/enterprise YANG schema element.
type Enterprise_Enterprise struct {
	Enterprise	map[string]*Enterprise_Enterprise_Enterprise	`path:"enterprise" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise) IsYANGGoStruct() {}

// NewEnterprise creates a new entry in the Enterprise list of the
// Enterprise_Enterprise struct. The keys of the list are populated from the input
// arguments.
func (t *Enterprise_Enterprise) NewEnterprise(Id string) (*Enterprise_Enterprise_Enterprise, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Enterprise == nil {
		t.Enterprise = make(map[string]*Enterprise_Enterprise_Enterprise)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Enterprise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Enterprise", key)
	}

	t.Enterprise[key] = &Enterprise_Enterprise_Enterprise{
		Id: &Id,
	}

	return t.Enterprise[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Enterprise_Enterprise_Enterprise represents the /enterprise/enterprise/enterprise YANG schema element.
type Enterprise_Enterprise_Enterprise struct {
	Description	*string	`path:"description" module:"enterprise"`
	DisplayName	*string	`path:"display-name" module:"enterprise"`
	Id	*string	`path:"id" module:"enterprise"`
}

// IsYANGGoStruct ensures that Enterprise_Enterprise_Enterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Enterprise_Enterprise_Enterprise) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Enterprise_Enterprise_Enterprise struct, which is a YANG list entry.
func (t *Enterprise_Enterprise_Enterprise) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Enterprise_Enterprise_Enterprise) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Enterprise_Enterprise_Enterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Enterprise_Enterprise_Enterprise) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Qos represents the /qos/qos YANG schema element.
type Qos_Qos struct {
	Qos	map[string]*Qos_Qos_Qos	`path:"qos" module:"qos"`
}

// IsYANGGoStruct ensures that Qos_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Qos) IsYANGGoStruct() {}

// NewQos creates a new entry in the Qos list of the
// Qos_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Qos) NewQos(Id string) (*Qos_Qos_Qos, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Qos == nil {
		t.Qos = make(map[string]*Qos_Qos_Qos)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Qos[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Qos", key)
	}

	t.Qos[key] = &Qos_Qos_Qos{
		Id: &Id,
	}

	return t.Qos[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Qos_Qos represents the /qos/qos/qos YANG schema element.
type Qos_Qos_Qos struct {
	ConnectivityService	*Qos_Qos_Qos_ConnectivityService	`path:"connectivity-service" module:"qos"`
	Description	*string	`path:"description" module:"qos"`
	DisplayName	*string	`path:"display-name" module:"qos"`
	Id	*string	`path:"id" module:"qos"`
}

// IsYANGGoStruct ensures that Qos_Qos_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Qos_Qos) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Qos_Qos_Qos struct, which is a YANG list entry.
func (t *Qos_Qos_Qos) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Qos_Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Qos_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Qos_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Qos_Qos_ConnectivityService represents the /qos/qos/qos/connectivity-service YANG schema element.
type Qos_Qos_Qos_ConnectivityService struct {
	ApnAmbr	*Qos_Qos_Qos_ConnectivityService_ApnAmbr	`path:"apn-ambr" module:"qos"`
}

// IsYANGGoStruct ensures that Qos_Qos_Qos_ConnectivityService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Qos_Qos_ConnectivityService) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Qos_Qos_ConnectivityService) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Qos_Qos_ConnectivityService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Qos_Qos_ConnectivityService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Qos_Qos_Qos_ConnectivityService_ApnAmbr represents the /qos/qos/qos/connectivity-service/apn-ambr YANG schema element.
type Qos_Qos_Qos_ConnectivityService_ApnAmbr struct {
	Downlink	*uint32	`path:"downlink" module:"qos"`
	Uplink	*uint32	`path:"uplink" module:"qos"`
}

// IsYANGGoStruct ensures that Qos_Qos_Qos_ConnectivityService_ApnAmbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Qos_Qos_ConnectivityService_ApnAmbr) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Qos_Qos_ConnectivityService_ApnAmbr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Qos_Qos_ConnectivityService_ApnAmbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Qos_Qos_ConnectivityService_ApnAmbr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Site_Site represents the /site/site YANG schema element.
type Site_Site struct {
	Site	map[string]*Site_Site_Site	`path:"site" module:"site"`
}

// IsYANGGoStruct ensures that Site_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Site_Site) IsYANGGoStruct() {}

// NewSite creates a new entry in the Site list of the
// Site_Site struct. The keys of the list are populated from the input
// arguments.
func (t *Site_Site) NewSite(Id string) (*Site_Site_Site, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Site == nil {
		t.Site = make(map[string]*Site_Site_Site)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Site[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Site", key)
	}

	t.Site[key] = &Site_Site_Site{
		Id: &Id,
	}

	return t.Site[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Site_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Site_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Site_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Site_Site_Site represents the /site/site/site YANG schema element.
type Site_Site_Site struct {
	Description	*string	`path:"description" module:"site"`
	DisplayName	*string	`path:"display-name" module:"site"`
	Enterprise	*string	`path:"enterprise" module:"site"`
	Id	*string	`path:"id" module:"site"`
}

// IsYANGGoStruct ensures that Site_Site_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Site_Site_Site) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Site_Site_Site struct, which is a YANG list entry.
func (t *Site_Site_Site) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Site_Site_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Site_Site_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Site_Site_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase represents the /use-case/use-case YANG schema element.
type UseCase_UseCase struct {
	UseCase	map[string]*UseCase_UseCase_UseCase	`path:"use-case" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase) IsYANGGoStruct() {}

// NewUseCase creates a new entry in the UseCase list of the
// UseCase_UseCase struct. The keys of the list are populated from the input
// arguments.
func (t *UseCase_UseCase) NewUseCase(Id string) (*UseCase_UseCase_UseCase, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UseCase == nil {
		t.UseCase = make(map[string]*UseCase_UseCase_UseCase)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UseCase[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UseCase", key)
	}

	t.UseCase[key] = &UseCase_UseCase_UseCase{
		Id: &Id,
	}

	return t.UseCase[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase_UseCase represents the /use-case/use-case/use-case YANG schema element.
type UseCase_UseCase_UseCase struct {
	Application	map[string]*UseCase_UseCase_UseCase_Application	`path:"application" module:"use-case"`
	Description	*string	`path:"description" module:"use-case"`
	DeviceGroup	map[string]*UseCase_UseCase_UseCase_DeviceGroup	`path:"device-group" module:"use-case"`
	DisplayName	*string	`path:"display-name" module:"use-case"`
	Enterprise	*string	`path:"enterprise" module:"use-case"`
	Id	*string	`path:"id" module:"use-case"`
	Qos	map[string]*UseCase_UseCase_UseCase_Qos	`path:"qos" module:"use-case"`
	Site	map[string]*UseCase_UseCase_UseCase_Site	`path:"site" module:"use-case"`
	Visibility	map[string]*UseCase_UseCase_UseCase_Visibility	`path:"visibility" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase_UseCase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase_UseCase) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// UseCase_UseCase_UseCase struct. The keys of the list are populated from the input
// arguments.
func (t *UseCase_UseCase_UseCase) NewApplication(Application string) (*UseCase_UseCase_UseCase_Application, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[string]*UseCase_UseCase_UseCase_Application)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &UseCase_UseCase_UseCase_Application{
		Application: &Application,
	}

	return t.Application[key], nil
}

// NewDeviceGroup creates a new entry in the DeviceGroup list of the
// UseCase_UseCase_UseCase struct. The keys of the list are populated from the input
// arguments.
func (t *UseCase_UseCase_UseCase) NewDeviceGroup(DeviceGroup string) (*UseCase_UseCase_UseCase_DeviceGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DeviceGroup == nil {
		t.DeviceGroup = make(map[string]*UseCase_UseCase_UseCase_DeviceGroup)
	}

	key := DeviceGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DeviceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DeviceGroup", key)
	}

	t.DeviceGroup[key] = &UseCase_UseCase_UseCase_DeviceGroup{
		DeviceGroup: &DeviceGroup,
	}

	return t.DeviceGroup[key], nil
}

// NewQos creates a new entry in the Qos list of the
// UseCase_UseCase_UseCase struct. The keys of the list are populated from the input
// arguments.
func (t *UseCase_UseCase_UseCase) NewQos(Qos string) (*UseCase_UseCase_UseCase_Qos, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Qos == nil {
		t.Qos = make(map[string]*UseCase_UseCase_UseCase_Qos)
	}

	key := Qos

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Qos[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Qos", key)
	}

	t.Qos[key] = &UseCase_UseCase_UseCase_Qos{
		Qos: &Qos,
	}

	return t.Qos[key], nil
}

// NewSite creates a new entry in the Site list of the
// UseCase_UseCase_UseCase struct. The keys of the list are populated from the input
// arguments.
func (t *UseCase_UseCase_UseCase) NewSite(Site string) (*UseCase_UseCase_UseCase_Site, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Site == nil {
		t.Site = make(map[string]*UseCase_UseCase_UseCase_Site)
	}

	key := Site

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Site[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Site", key)
	}

	t.Site[key] = &UseCase_UseCase_UseCase_Site{
		Site: &Site,
	}

	return t.Site[key], nil
}

// NewVisibility creates a new entry in the Visibility list of the
// UseCase_UseCase_UseCase struct. The keys of the list are populated from the input
// arguments.
func (t *UseCase_UseCase_UseCase) NewVisibility(Visibility string) (*UseCase_UseCase_UseCase_Visibility, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Visibility == nil {
		t.Visibility = make(map[string]*UseCase_UseCase_UseCase_Visibility)
	}

	key := Visibility

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Visibility[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Visibility", key)
	}

	t.Visibility[key] = &UseCase_UseCase_UseCase_Visibility{
		Visibility: &Visibility,
	}

	return t.Visibility[key], nil
}

// ΛListKeyMap returns the keys of the UseCase_UseCase_UseCase struct, which is a YANG list entry.
func (t *UseCase_UseCase_UseCase) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase_UseCase) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase_UseCase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase_UseCase) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase_UseCase_Application represents the /use-case/use-case/use-case/application YANG schema element.
type UseCase_UseCase_UseCase_Application struct {
	Allowed	*bool	`path:"allowed" module:"use-case"`
	Application	*string	`path:"application" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase_UseCase_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase_UseCase_Application) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UseCase_UseCase_UseCase_Application struct, which is a YANG list entry.
func (t *UseCase_UseCase_UseCase_Application) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Application == nil {
		return nil, fmt.Errorf("nil value for key Application")
	}

	return map[string]interface{}{
		"application": *t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase_UseCase_Application) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase_UseCase_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase_UseCase_Application) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase_UseCase_DeviceGroup represents the /use-case/use-case/use-case/device-group YANG schema element.
type UseCase_UseCase_UseCase_DeviceGroup struct {
	Allowed	*bool	`path:"allowed" module:"use-case"`
	DeviceGroup	*string	`path:"device-group" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase_UseCase_DeviceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase_UseCase_DeviceGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UseCase_UseCase_UseCase_DeviceGroup struct, which is a YANG list entry.
func (t *UseCase_UseCase_UseCase_DeviceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DeviceGroup == nil {
		return nil, fmt.Errorf("nil value for key DeviceGroup")
	}

	return map[string]interface{}{
		"device-group": *t.DeviceGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase_UseCase_DeviceGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase_UseCase_DeviceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase_UseCase_DeviceGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase_UseCase_Qos represents the /use-case/use-case/use-case/qos YANG schema element.
type UseCase_UseCase_UseCase_Qos struct {
	Allowed	*bool	`path:"allowed" module:"use-case"`
	Qos	*string	`path:"qos" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase_UseCase_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase_UseCase_Qos) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UseCase_UseCase_UseCase_Qos struct, which is a YANG list entry.
func (t *UseCase_UseCase_UseCase_Qos) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Qos == nil {
		return nil, fmt.Errorf("nil value for key Qos")
	}

	return map[string]interface{}{
		"qos": *t.Qos,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase_UseCase_Qos) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase_UseCase_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase_UseCase_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase_UseCase_Site represents the /use-case/use-case/use-case/site YANG schema element.
type UseCase_UseCase_UseCase_Site struct {
	Allowed	*bool	`path:"allowed" module:"use-case"`
	Site	*string	`path:"site" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase_UseCase_Site implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase_UseCase_Site) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UseCase_UseCase_UseCase_Site struct, which is a YANG list entry.
func (t *UseCase_UseCase_UseCase_Site) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Site == nil {
		return nil, fmt.Errorf("nil value for key Site")
	}

	return map[string]interface{}{
		"site": *t.Site,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase_UseCase_Site) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase_UseCase_Site"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase_UseCase_Site) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// UseCase_UseCase_UseCase_Visibility represents the /use-case/use-case/use-case/visibility YANG schema element.
type UseCase_UseCase_UseCase_Visibility struct {
	Allowed	*bool	`path:"allowed" module:"use-case"`
	Visibility	*string	`path:"visibility" module:"use-case"`
}

// IsYANGGoStruct ensures that UseCase_UseCase_UseCase_Visibility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UseCase_UseCase_UseCase_Visibility) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the UseCase_UseCase_UseCase_Visibility struct, which is a YANG list entry.
func (t *UseCase_UseCase_UseCase_Visibility) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Visibility == nil {
		return nil, fmt.Errorf("nil value for key Visibility")
	}

	return map[string]interface{}{
		"visibility": *t.Visibility,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UseCase_UseCase_UseCase_Visibility) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UseCase_UseCase_UseCase_Visibility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UseCase_UseCase_UseCase_Visibility) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Visibility_Visibility represents the /visibility/visibility YANG schema element.
type Visibility_Visibility struct {
	Visibility	map[string]*Visibility_Visibility_Visibility	`path:"visibility" module:"visibility"`
}

// IsYANGGoStruct ensures that Visibility_Visibility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Visibility_Visibility) IsYANGGoStruct() {}

// NewVisibility creates a new entry in the Visibility list of the
// Visibility_Visibility struct. The keys of the list are populated from the input
// arguments.
func (t *Visibility_Visibility) NewVisibility(Id string) (*Visibility_Visibility_Visibility, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Visibility == nil {
		t.Visibility = make(map[string]*Visibility_Visibility_Visibility)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Visibility[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Visibility", key)
	}

	t.Visibility[key] = &Visibility_Visibility_Visibility{
		Id: &Id,
	}

	return t.Visibility[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Visibility_Visibility) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Visibility_Visibility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Visibility_Visibility) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Visibility_Visibility_Visibility represents the /visibility/visibility/visibility YANG schema element.
type Visibility_Visibility_Visibility struct {
	Application	*string	`path:"application" module:"visibility"`
	Description	*string	`path:"description" module:"visibility"`
	DisplayName	*string	`path:"display-name" module:"visibility"`
	Id	*string	`path:"id" module:"visibility"`
}

// IsYANGGoStruct ensures that Visibility_Visibility_Visibility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Visibility_Visibility_Visibility) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Visibility_Visibility_Visibility struct, which is a YANG list entry.
func (t *Visibility_Visibility_Visibility) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Visibility_Visibility_Visibility) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Visibility_Visibility_Visibility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Visibility_Visibility_Visibility) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5d, 0x73, 0xe2, 0x46,
		0xd6, 0xbe, 0xf7, 0xaf, 0xa0, 0xa8, 0x4a, 0x95, 0x99, 0x98, 0x09, 0x78, 0xb0, 0x3d, 0xe6, 0xc6,
		0xe5, 0x37, 0x33, 0xc9, 0x5b, 0x95, 0x8f, 0x4d, 0x32, 0xbb, 0xb9, 0x58, 0x9b, 0xa5, 0x64, 0x68,
		0x33, 0x5d, 0xc1, 0x12, 0x96, 0x84, 0x27, 0x5e, 0x0f, 0xff, 0x7d, 0x4b, 0x08, 0x84, 0x30, 0xfa,
		0x38, 0xa7, 0xd5, 0x34, 0x12, 0x3c, 0x17, 0x36, 0x12, 0xa8, 0xa5, 0xee, 0xd3, 0xe7, 0x3c, 0x7d,
		0xfa, 0x7c, 0xe9, 0xe5, 0xa8, 0x56, 0xab, 0xd5, 0xea, 0xbf, 0x5a, 0x0f, 0xa2, 0xde, 0xad, 0xd5,
		0x87, 0xe2, 0x49, 0x0e, 0x44, 0xfd, 0x24, 0xfc, 0xf6, 0x27, 0x69, 0x0f, 0xeb, 0xdd, 0x5a, 0x7b,
		0x71, 0xfa, 0xbd, 0x63, 0xdf, 0xcb, 0x51, 0xbd, 0x5b, 0x6b, 0x2d, 0xbe, 0xf8, 0x20, 0xdd, 0x7a,
		0xb7, 0x16, 0xde, 0x62, 0xfe, 0x85, 0x35, 0x99, 0x8c, 0xe5, 0xc0, 0xf2, 0xa5, 0x63, 0xaf, 0xfd,
		0xb0, 0xf6, 0x8c, 0xf8, 0x45, 0x27, 0xeb, 0x97, 0xac, 0x3f, 0x30, 0xfa, 0xfa, 0xf5, 0x83, 0xa3,
		0x1f, 0x7e, 0x73, 0xc5, 0xbd, 0xfc, 0x7b, 0xe3, 0x51, 0xaf, 0x1f, 0xf7, 0xea, 0x31, 0xf3, 0x9f,
		0x3f, 0x39, 0x53, 0x77, 0x20, 0x12, 0x9b, 0x86, 0x5d, 0x11, 0xcf, 0x5f, 0x1c, 0x37, 0xe8, 0x4d,
		0x7d, 0x12, 0x3e, 0xe5, 0x24, 0xf9, 0xc2, 0xff, 0xb7, 0xbc, 0x6b, 0x77, 0x34, 0x7d, 0x10, 0xb6,
		0x5f, 0xef, 0xd6, 0x7c, 0x77, 0x2a, 0x52, 0x2e, 0x8c, 0x5d, 0x35, 0xef, 0xd4, 0xc6, 0x55, 0xb3,
		0xb5, 0x6f, 0x66, 0xaf, 0xc6, 0xfa, 0x9a, 0xd8, 0x24, 0xa2, 0x33, 0x88, 0x9f, 0x33, 0x09, 0xb9,
		0x93, 0x41, 0x99, 0x14, 0xe2, 0xe4, 0x50, 0x27, 0x89, 0x3d, 0x59, 0xec, 0x49, 0xa3, 0x4f, 0x5e,
		0xf2, 0x24, 0xa6, 0x4c, 0x66, 0xee, 0xa4, 0x46, 0x17, 0x0c, 0xc5, 0x64, 0xec, 0x3c, 0x07, 0x4f,
		0x6e, 0x0a, 0xfb, 0x49, 0xba, 0x8e, 0xbd, 0xe8, 0x45, 0x0e, 0x45, 0x56, 0x02, 0x9d, 0xd8, 0x3e,
		0x67, 0xb4, 0x0b, 0x16, 0x68, 0xe5, 0x5c, 0x96, 0xc7, 0x0a, 0x1c, 0x96, 0x60, 0xb2, 0x06, 0x97,
		0x45, 0x94, 0x59, 0x45, 0x99, 0x65, 0xf8, 0xac, 0x93, 0xcd, 0x42, 0x39, 0xac, 0x14, 0x3d, 0xee,
		0x9f, 0xcf, 0x13, 0xc1, 0xa3, 0xf4, 0x58, 0x58, 0xf7, 0xae, 0xb8, 0xa7, 0x50, 0x7b, 0x89, 0x0d,
		0x17, 0x84, 0x6b, 0x7f, 0xb3, 0xfc, 0xcf, 0xc1, 0xed, 0xbf, 0x1b, 0x8a, 0x6e, 0x32, 0x1b, 0x66,
		0xff, 0x22, 0x87, 0xd9, 0xa4, 0x4a, 0x27, 0x53, 0x06, 0x89, 0xea, 0x43, 0xe1, 0x0d, 0x5c, 0x39,
		0xc9, 0x44, 0xcb, 0x04, 0x29, 0x5a, 0x35, 0x82, 0xe8, 0x40, 0x74, 0x22, 0x4a, 0x7b, 0xbe, 0x2b,
		0xed, 0x11, 0x47, 0x72, 0xde, 0x13, 0xae, 0xfd, 0x59, 0xd8, 0xa3, 0xb9, 0xec, 0xdc, 0x90, 0xc8,
		0x44, 0x9b, 0xbe, 0xf9, 0x9d, 0x7f, 0x91, 0x36, 0x79, 0xbe, 0x99, 0x2c, 0xbd, 0xd1, 0xec, 0x4f,
		0x6b, 0x3c, 0x15, 0xe9, 0x8a, 0x44, 0x6a, 0xbb, 0x1f, 0x5c, 0x6b, 0x10, 0x48, 0xda, 0x07, 0x39,
		0x92, 0xbe, 0x17, 0x3c, 0x98, 0xdc, 0x7e, 0x76, 0xc2, 0x20, 0x85, 0xf5, 0xb7, 0x79, 0x52, 0xb4,
		0x5a, 0x06, 0x89, 0x71, 0xa4, 0xe7, 0xaa, 0xde, 0x36, 0x50, 0x58, 0x7a, 0x93, 0xb1, 0xf5, 0xdc,
		0xb4, 0x43, 0x39, 0xa2, 0xc2, 0x70, 0xbc, 0x15, 0x70, 0x18, 0x38, 0x0c, 0x1c, 0x06, 0x0e, 0xab,
		0x90, 0xe2, 0x3d, 0x60, 0x78, 0x3e, 0x2c, 0x61, 0x0f, 0x27, 0x8e, 0xe4, 0xec, 0x27, 0xa3, 0x16,
		0x34, 0xf8, 0x6d, 0x03, 0x7e, 0xab, 0x07, 0xbf, 0x79, 0x46, 0x89, 0xe8, 0xc2, 0xcf, 0x8e, 0xe7,
		0x93, 0x56, 0xf0, 0x8d, 0xa9, 0x89, 0x5a, 0x12, 0x29, 0xc0, 0x93, 0x77, 0x32, 0x5b, 0xa9, 0xb0,
		0x97, 0x22, 0x9b, 0xa9, 0xb2, 0x5b, 0x61, 0xb6, 0x2b, 0xcc, 0x7e, 0xea, 0x6c, 0xc8, 0x84, 0x40,
		0xe2, 0x5c, 0x91, 0xb5, 0x83, 0x44, 0xae, 0xe3, 0x4c, 0xd5, 0x12, 0xc4, 0x2e, 0x19, 0x6d, 0x16,
		0xbd, 0xbb, 0x61, 0x91, 0x96, 0xc7, 0x0a, 0x6b, 0x63, 0x92, 0x93, 0xa6, 0x35, 0x1c, 0xba, 0xc2,
		0xf3, 0x98, 0xfc, 0xa0, 0x3a, 0xc2, 0x62, 0x23, 0x55, 0x1f, 0x71, 0xc2, 0xc8, 0x9f, 0x3a, 0x05,
		0xc6, 0xae, 0xa2, 0x11, 0x66, 0xd9, 0xba, 0x7c, 0xe1, 0xda, 0xca, 0xe4, 0x88, 0x6e, 0x74, 0x7c,
		0x7c, 0xd3, 0x6a, 0x5e, 0xf6, 0xbe, 0xde, 0xb4, 0x9b, 0x97, 0xbd, 0xf0, 0xb0, 0x3d, 0xff, 0x08,
		0x8f, 0x4f, 0x6f, 0x5a, 0xcd, 0xce, 0xf2, 0xf8, 0xec, 0xa6, 0xd5, 0x3c, 0xeb, 0x35, 0x6e, 0x6f,
		0xdf, 0x36, 0x5e, 0xde, 0xcd, 0xf8, 0x0d, 0x8f, 0xbf, 0xb9, 0xb9, 0xbd, 0x9d, 0xbc, 0xfc, 0x3a,
		0x0b, 0xfe, 0xff, 0x3c, 0xeb, 0x7d, 0xdb, 0xb8, 0xaa, 0x2b, 0xf7, 0xbe, 0xa7, 0xd4, 0x72, 0x76,
		0xb2, 0x43, 0xee, 0x39, 0xdf, 0x43, 0xee, 0xe9, 0x7e, 0x0d, 0xe6, 0xd8, 0x6a, 0xde, 0x5f, 0x37,
		0x7f, 0xe8, 0xbd, 0xb4, 0x4e, 0x3a, 0xb3, 0x46, 0xb7, 0x71, 0xfc, 0xfa, 0xbb, 0x6e, 0xe3, 0xa5,
		0x75, 0x72, 0x36, 0x3b, 0x3e, 0x4e, 0xf8, 0xe5, 0x2a, 0xe9, 0x1e, 0x8d, 0xaf, 0xc7, 0xc7, 0xc7,
		0x0b, 0xbe, 0x59, 0xe3, 0xa5, 0x9b, 0x56, 0xbb, 0x77, 0x35, 0x3f, 0x0c, 0xff, 0x47, 0xdc, 0x48,
		0xba, 0xb8, 0x91, 0xc8, 0x83, 0x27, 0x85, 0x45, 0xe8, 0x3f, 0xdd, 0xde, 0xb7, 0xdd, 0xc6, 0xcb,
		0xf9, 0x6c, 0x79, 0x3c, 0xff, 0xdf, 0xf8, 0x7a, 0xfc, 0xf6, 0xcd, 0xed, 0xed, 0xdb, 0xb7, 0x6f,
		0x1a, 0xe1, 0x80, 0x16, 0xd7, 0xbd, 0x09, 0x7f, 0xbd, 0xea, 0x76, 0x37, 0xbe, 0x6a, 0x1c, 0x7f,
		0xf3, 0x76, 0x17, 0x62, 0x71, 0xb4, 0xdd, 0xe7, 0x30, 0xc5, 0xae, 0xc0, 0xf2, 0x34, 0x74, 0x1e,
		0x2c, 0x69, 0x37, 0x19, 0xba, 0x9e, 0x2e, 0xe9, 0xe2, 0xee, 0xde, 0x35, 0x62, 0x8c, 0xca, 0xee,
		0x5e, 0xd3, 0x16, 0x57, 0xd7, 0xee, 0x5f, 0xe7, 0x0e, 0x58, 0x13, 0xe8, 0x2b, 0x5b, 0x0b, 0xb6,
		0x4d, 0xda, 0xd3, 0xb3, 0x77, 0x25, 0x22, 0xae, 0x29, 0xc0, 0x51, 0x90, 0xc8, 0xa2, 0xeb, 0x5c,
		0x3d, 0xc0, 0x6c, 0xab, 0xf9, 0xdf, 0xeb, 0xe6, 0xbf, 0x5b, 0xcd, 0xcb, 0x7e, 0x2f, 0x76, 0x72,
		0x7b, 0xdb, 0xec, 0xf7, 0x82, 0x55, 0xed, 0xbc, 0x3d, 0x6b, 0x5c, 0xad, 0xbe, 0xef, 0x05, 0xeb,
		0xd1, 0x1b, 0x95, 0x56, 0x57, 0x8d, 0xaf, 0xb7, 0xb7, 0x6f, 0xeb, 0xdb, 0x46, 0xe2, 0x23, 0xbd,
		0xf7, 0xcd, 0xbf, 0x1f, 0x41, 0xfa, 0xea, 0x6a, 0x9b, 0x7a, 0x6c, 0xe8, 0xb1, 0xa1, 0x37, 0xbb,
		0xa1, 0x27, 0x9b, 0xfd, 0x37, 0x15, 0x0a, 0x83, 0xd2, 0x34, 0x71, 0x5c, 0x9f, 0x2f, 0x4d, 0xf3,
		0x56, 0x90, 0x26, 0x48, 0x93, 0x31, 0x69, 0x0a, 0x38, 0xae, 0x69, 0x4f, 0x1f, 0xee, 0x84, 0xab,
		0x20, 0x52, 0xe7, 0x8c, 0x26, 0x7f, 0x58, 0xf6, 0xc8, 0x88, 0x95, 0xac, 0x88, 0x26, 0x5e, 0x50,
		0x4d, 0x8c, 0xd4, 0x43, 0xd5, 0xf6, 0x1a, 0x94, 0x42, 0x05, 0x4d, 0xbb, 0x90, 0x86, 0xad, 0x8b,
		0x64, 0xe7, 0x67, 0x67, 0xef, 0xce, 0x76, 0x48, 0xb6, 0xb2, 0xab, 0x70, 0x85, 0xdc, 0x3b, 0x3f,
		0x89, 0x67, 0xa2, 0xb6, 0x56, 0xff, 0x59, 0x7a, 0xfe, 0xb5, 0xef, 0x13, 0xdd, 0x41, 0xbf, 0x48,
		0xfb, 0xe3, 0x58, 0x04, 0x10, 0xe8, 0xd1, 0x78, 0x20, 0xe0, 0xb5, 0x58, 0x8b, 0xf6, 0xfb, 0x4e,
		0xe7, 0xfc, 0xa2, 0xd3, 0x69, 0x5d, 0xbc, 0xbb, 0x68, 0x5d, 0x9e, 0x9d, 0xb5, 0xcf, 0xdb, 0x04,
		0x26, 0xa8, 0xff, 0xc3, 0x1d, 0x0a, 0x57, 0x0c, 0xff, 0x2f, 0x18, 0x95, 0x3d, 0x1d, 0x8f, 0x0b,
		0x11, 0xe7, 0xda, 0xb6, 0x1d, 0xdf, 0x22, 0x45, 0x07, 0xce, 0xaf, 0xf7, 0x06, 0x9f, 0xc5, 0x83,
		0x35, 0x59, 0x86, 0x3a, 0xc6, 0xc2, 0xab, 0x53, 0x8f, 0x89, 0x2e, 0xd4, 0xf0, 0xf6, 0xbe, 0x3b,
		0x1d, 0x2c, 0x7d, 0x6c, 0xf5, 0xeb, 0xd5, 0x5d, 0xfa, 0x69, 0xc7, 0x1f, 0x97, 0x77, 0xdf, 0x82,
		0xbb, 0x58, 0x0e, 0xe9, 0x8e, 0x62, 0x39, 0x44, 0x84, 0x0e, 0x22, 0x74, 0x12, 0x13, 0x0f, 0x9a,
		0xb9, 0xbc, 0x51, 0x43, 0xa4, 0x8e, 0xa1, 0x25, 0xaf, 0xec, 0x91, 0x3a, 0xef, 0x4e, 0x11, 0xa9,
		0x13, 0x0c, 0xeb, 0xd1, 0xf1, 0xe8, 0xd8, 0x1b, 0x5c, 0x8c, 0xf8, 0x1c, 0xc4, 0xe7, 0x58, 0xe3,
		0xb1, 0xf3, 0x45, 0x0c, 0xf9, 0xb6, 0x87, 0x65, 0x43, 0xe2, 0xf8, 0x3f, 0x88, 0x7b, 0x6b, 0x3a,
		0x9e, 0x0f, 0x3f, 0xa0, 0x1a, 0xac, 0x16, 0xb0, 0x5a, 0x98, 0xb3, 0x5a, 0xdc, 0x39, 0xce, 0x58,
		0x58, 0xb6, 0x8a, 0x11, 0xb0, 0x6d, 0xd0, 0x08, 0x48, 0x01, 0x70, 0x05, 0x20, 0x87, 0x30, 0x41,
		0x98, 0x34, 0x0a, 0x13, 0x3d, 0x15, 0x70, 0x43, 0x98, 0x2e, 0x18, 0x6d, 0xa2, 0xd4, 0xc0, 0x47,
		0xc7, 0xeb, 0x3e, 0x3a, 0xde, 0xda, 0x67, 0x5e, 0xde, 0x9f, 0x61, 0x3b, 0x09, 0x41, 0x99, 0x82,
		0x99, 0x64, 0x0b, 0x66, 0x12, 0x1a, 0xf6, 0x29, 0x58, 0x48, 0x7e, 0x77, 0x3c, 0x65, 0xe3, 0x08,
		0x2b, 0xb9, 0x7b, 0xc1, 0x40, 0xa9, 0xbb, 0x5d, 0x1a, 0xdf, 0xd0, 0xf9, 0xa5, 0x10, 0x9f, 0xd0,
		0xf8, 0x23, 0x6d, 0xa8, 0x44, 0x7e, 0x50, 0xe0, 0x83, 0xac, 0xf2, 0x00, 0xec, 0xb9, 0x4f, 0x9e,
		0xf7, 0x19, 0xb3, 0x12, 0x43, 0xce, 0x60, 0x89, 0x83, 0x4c, 0x2a, 0x4a, 0x41, 0x1a, 0xd0, 0xfa,
		0x20, 0x56, 0x5d, 0x8d, 0x75, 0x93, 0x5a, 0x36, 0x80, 0x57, 0x26, 0x60, 0x2b, 0xe5, 0x39, 0xc8,
		0x05, 0x0a, 0x76, 0x5c, 0xb1, 0x23, 0xa5, 0x9f, 0xba, 0x8a, 0x78, 0x30, 0xeb, 0x3c, 0xa8, 0xd5,
		0x77, 0x30, 0x5a, 0xda, 0x83, 0x5d, 0x79, 0xa2, 0xa4, 0xd5, 0x3e, 0xa8, 0x13, 0xaf, 0xb6, 0x46,
		0xe4, 0x16, 0x00, 0x19, 0x8c, 0xa7, 0x9e, 0x2f, 0x5c, 0x66, 0xa6, 0xec, 0x5a, 0xab, 0x0a, 0xd8,
		0xe1, 0x95, 0xca, 0x94, 0x54, 0xd0, 0x3a, 0xc4, 0x65, 0xa6, 0x5d, 0x59, 0xeb, 0x91, 0x4f, 0x0b,
		0x2b, 0x3d, 0x83, 0x14, 0xc8, 0xa7, 0x5d, 0xae, 0xe2, 0xfb, 0x5f, 0x5c, 0x06, 0x50, 0x0d, 0xa8,
		0x06, 0x54, 0x57, 0x16, 0xaa, 0x51, 0x82, 0x66, 0x89, 0xd5, 0x07, 0x51, 0x82, 0x06, 0x68, 0x0d,
		0xb4, 0x06, 0x5a, 0x43, 0xb1, 0xae, 0x38, 0x58, 0xef, 0x5f, 0xe4, 0x21, 0x80, 0xb9, 0x5c, 0xc0,
		0x9c, 0xdc, 0x4f, 0x84, 0x2a, 0x02, 0xab, 0xa9, 0xa4, 0x40, 0xa8, 0x62, 0x38, 0x2c, 0x4f, 0xfa,
		0x0c, 0x85, 0x7a, 0x7e, 0x35, 0xf0, 0x1a, 0x78, 0x5d, 0xb2, 0xa2, 0xd5, 0x9e, 0xdf, 0x0d, 0x58,
		0x33, 0xfe, 0x59, 0xa0, 0x20, 0x35, 0xe2, 0x06, 0xb4, 0xc6, 0x0d, 0xa4, 0x16, 0x0d, 0x67, 0x7c,
		0x4d, 0x0f, 0x2c, 0xf8, 0x10, 0xb5, 0xff, 0xb8, 0x6a, 0xde, 0x67, 0x7c, 0xbb, 0x93, 0xb0, 0x83,
		0xa2, 0xc4, 0x50, 0x27, 0x02, 0x2d, 0x40, 0xe1, 0x49, 0x0e, 0x44, 0x73, 0xe4, 0x3a, 0xd3, 0x49,
		0x56, 0x58, 0x42, 0xec, 0x2a, 0x13, 0xc1, 0x08, 0xa3, 0x12, 0x06, 0x1e, 0x8c, 0x34, 0x06, 0x19,
		0x64, 0x10, 0x9d, 0x43, 0xfc, 0x9c, 0x49, 0x20, 0xaf, 0xc8, 0xbc, 0x80, 0x82, 0x51, 0x05, 0x83,
		0x07, 0x46, 0x06, 0xdf, 0x14, 0x72, 0x00, 0xbe, 0xa7, 0xd1, 0x1e, 0x2a, 0x5c, 0x23, 0x58, 0x29,
		0xb1, 0xf3, 0xad, 0xf4, 0xce, 0x17, 0x3e, 0xa5, 0x25, 0x06, 0x1f, 0x86, 0x4f, 0x09, 0x28, 0x0c,
		0x14, 0x06, 0x0a, 0x97, 0x0d, 0x85, 0xe1, 0x2b, 0x0a, 0x87, 0xb5, 0x87, 0xbe, 0x22, 0x00, 0xae,
		0x11, 0xc0, 0x8d, 0xef, 0x78, 0xe1, 0xf9, 0x01, 0xf2, 0x52, 0x49, 0x71, 0x50, 0x9e, 0x1f, 0x98,
		0xb2, 0x35, 0x9b, 0xb2, 0x57, 0x98, 0x93, 0x7e, 0xc2, 0x31, 0x56, 0x07, 0xad, 0x7e, 0x0c, 0x1a,
		0xf5, 0x53, 0x8e, 0x77, 0x64, 0x8e, 0xa6, 0x0f, 0x8d, 0x36, 0x24, 0x86, 0x99, 0xd9, 0x5d, 0xd4,
		0x1b, 0xcc, 0x36, 0x33, 0x87, 0x57, 0x99, 0x30, 0x33, 0xbb, 0x25, 0x34, 0x33, 0xbb, 0xba, 0xcd,
		0xcc, 0xc9, 0x44, 0xe7, 0x10, 0x7f, 0x37, 0x66, 0x66, 0xb7, 0x82, 0x66, 0x66, 0xd7, 0xa0, 0x99,
		0x99, 0xe0, 0x43, 0x50, 0xf1, 0x25, 0x10, 0x27, 0xdb, 0x90, 0xc6, 0xed, 0xee, 0xa1, 0xc6, 0xed,
		0xa2, 0x30, 0x51, 0xf5, 0x6b, 0xa9, 0x0c, 0xdd, 0xc3, 0x2b, 0xa5, 0x42, 0xe1, 0x5c, 0xa6, 0x7e,
		0x8c, 0xb2, 0x44, 0x0a, 0x70, 0x5e, 0x04, 0xd6, 0x21, 0x5c, 0x10, 0x2e, 0x6d, 0xc2, 0x65, 0xba,
		0x4c, 0xd1, 0x70, 0xd4, 0x5d, 0xdf, 0xbf, 0x6c, 0x9e, 0x97, 0xac, 0x6a, 0x11, 0x47, 0xe1, 0x42,
		0xf9, 0xa2, 0xbc, 0x87, 0x27, 0xef, 0x65, 0xe7, 0x5b, 0x96, 0xfc, 0x13, 0x2a, 0x3a, 0x26, 0xee,
		0x7a, 0xe7, 0x95, 0xf2, 0xfb, 0xd9, 0xc7, 0x19, 0x9b, 0xfa, 0x62, 0x96, 0xf4, 0x03, 0x71, 0x67,
		0x42, 0xd7, 0x37, 0x62, 0x5d, 0x87, 0x3b, 0x13, 0x46, 0x75, 0x06, 0x29, 0xe0, 0xce, 0x0c, 0x87,
		0x25, 0x6c, 0xeb, 0x6e, 0x2c, 0x86, 0x9c, 0x57, 0xb4, 0x87, 0x0d, 0xf2, 0x36, 0xeb, 0xab, 0xbd,
		0xf1, 0xbd, 0x35, 0xf6, 0x00, 0xd5, 0x80, 0x6a, 0x85, 0xcd, 0x2b, 0x71, 0xd3, 0xaa, 0xca, 0xfa,
		0xbe, 0x70, 0x27, 0xae, 0xf4, 0x04, 0x87, 0xfb, 0xa3, 0x36, 0x60, 0x68, 0x30, 0xb4, 0xa1, 0x6c,
		0x21, 0x61, 0xfb, 0xdd, 0x15, 0xe7, 0x25, 0x9d, 0x16, 0x48, 0x1e, 0x3a, 0xac, 0x58, 0x17, 0x48,
		0x84, 0x11, 0x89, 0x98, 0x4e, 0xf5, 0x07, 0xb8, 0x70, 0xdf, 0xef, 0x5a, 0x8f, 0xbf, 0x67, 0xfc,
		0xfd, 0xac, 0x19, 0x3f, 0xed, 0x70, 0x4e, 0xdb, 0xa7, 0xb3, 0xfa, 0x6e, 0x62, 0xcd, 0x1e, 0x3c,
		0xc9, 0x90, 0xc0, 0xe0, 0x6a, 0x9a, 0x0c, 0x9e, 0x41, 0x06, 0xab, 0x26, 0x83, 0x64, 0xef, 0x57,
		0xb6, 0x63, 0x3c, 0x75, 0x56, 0xb2, 0x3c, 0xe4, 0x69, 0x6c, 0xd4, 0x81, 0x95, 0xfd, 0xd0, 0xad,
		0xec, 0x54, 0xb6, 0x5c, 0xc3, 0xb4, 0xd0, 0x82, 0xd9, 0xbc, 0x77, 0x9d, 0x07, 0x3e, 0xe5, 0xe3,
		0x70, 0x17, 0xbf, 0xd1, 0x89, 0x11, 0xfb, 0x01, 0x97, 0x95, 0x8b, 0xb0, 0x74, 0x31, 0xd6, 0x2e,
		0xca, 0xe2, 0xda, 0x58, 0x5d, 0x1b, 0xcb, 0x17, 0x66, 0x7d, 0x9e, 0x08, 0x28, 0x98, 0xb2, 0x6a,
		0x4a, 0x8e, 0xa7, 0x4d, 0xed, 0x49, 0xda, 0xfe, 0x79, 0x47, 0x65, 0xae, 0x17, 0x5c, 0xfd, 0x5e,
		0xa1, 0xa9, 0xda, 0x5b, 0x73, 0xf9, 0x96, 0x4f, 0x2d, 0x96, 0x50, 0x4d, 0xe2, 0x9c, 0x6a, 0x1e,
		0x2c, 0x7a, 0x1f, 0x0d, 0xaf, 0x89, 0x55, 0x64, 0xbf, 0xc2, 0x96, 0xd5, 0x6d, 0x93, 0x56, 0xcd,
		0x43, 0x67, 0x8c, 0xda, 0x47, 0x66, 0x5a, 0xf5, 0xb6, 0xf4, 0x12, 0x60, 0x8e, 0xdd, 0x3d, 0xb6,
		0x82, 0xfa, 0x8e, 0x96, 0x85, 0xd8, 0x77, 0xb0, 0x0c, 0x63, 0x19, 0xc6, 0x32, 0x8c, 0x65, 0x18,
		0xcb, 0x30, 0x96, 0xe1, 0x43, 0x5e, 0x86, 0xb5, 0x6e, 0xb2, 0x99, 0x01, 0x45, 0x51, 0x3b, 0xb5,
		0xc0, 0xa2, 0x60, 0x3d, 0xff, 0x2e, 0x34, 0x07, 0x19, 0x0c, 0x15, 0xfd, 0x22, 0xc7, 0xc3, 0x81,
		0xe5, 0x2a, 0x44, 0x6d, 0x47, 0x2d, 0x61, 0xbc, 0x82, 0xf1, 0xca, 0x80, 0xf1, 0x8a, 0xcd, 0xa9,
		0xc9, 0x1a, 0x33, 0x93, 0x6d, 0xa1, 0x31, 0x43, 0x63, 0x2e, 0xbd, 0xc6, 0x4c, 0x0e, 0xc2, 0x4b,
		0xe3, 0xea, 0xb6, 0x8a, 0xca, 0xcc, 0x0c, 0xd2, 0xdb, 0x73, 0x9d, 0xb9, 0x0d, 0x9d, 0x79, 0x6b,
		0xa4, 0x85, 0x86, 0x0c, 0x0d, 0x79, 0xa9, 0x21, 0x47, 0xeb, 0x77, 0x29, 0x12, 0x33, 0xcc, 0xe4,
		0x1c, 0xcc, 0x43, 0x0c, 0xb6, 0x10, 0xe8, 0x30, 0x71, 0xa5, 0xe3, 0x4a, 0xff, 0x99, 0x1e, 0xec,
		0x10, 0xb5, 0xa0, 0xc7, 0xa1, 0xb6, 0x10, 0xa0, 0x84, 0x00, 0xa5, 0xb8, 0x6d, 0xef, 0xdd, 0x29,
		0x23, 0x44, 0x89, 0x12, 0xb0, 0xc7, 0xb3, 0xdd, 0x95, 0x3c, 0x59, 0xa0, 0x85, 0x64, 0x81, 0x58,
		0x05, 0xca, 0x16, 0x6a, 0xf0, 0xa0, 0x06, 0x4f, 0xa1, 0x1a, 0x3c, 0x39, 0x6b, 0x2b, 0xb7, 0x06,
		0x4f, 0x66, 0xea, 0xde, 0x2e, 0x6b, 0xf0, 0x90, 0x86, 0x46, 0x1b, 0x12, 0xa5, 0x06, 0x4f, 0x46,
		0x14, 0x7f, 0x7e, 0xd4, 0xfe, 0x56, 0xea, 0xef, 0x94, 0xf2, 0x05, 0xf3, 0x3a, 0xdf, 0x26, 0x4f,
		0x48, 0x9c, 0xa0, 0x27, 0x4c, 0x18, 0xad, 0xbe, 0x53, 0xc9, 0x57, 0xc4, 0x9b, 0x7c, 0x1f, 0xfc,
		0x21, 0x94, 0x79, 0xdf, 0xcb, 0x17, 0xeb, 0xe0, 0x75, 0x94, 0x15, 0x55, 0xb3, 0x91, 0x93, 0x8b,
		0x42, 0xef, 0x1b, 0x28, 0x7c, 0x10, 0x95, 0x11, 0x80, 0xc3, 0xc0, 0x61, 0xe0, 0x70, 0x09, 0x71,
		0x18, 0xb5, 0x11, 0xc2, 0x61, 0xed, 0x5f, 0xfa, 0x2b, 0x20, 0xd7, 0x14, 0xe4, 0xae, 0xf6, 0xbd,
		0x28, 0xf5, 0x0e, 0xe4, 0xa5, 0x92, 0x02, 0xa5, 0xde, 0x61, 0x66, 0x56, 0x35, 0x33, 0xaf, 0x57,
		0x84, 0xd8, 0x3c, 0xa4, 0x1b, 0x98, 0x3f, 0x46, 0x6d, 0xfa, 0x89, 0x87, 0x3b, 0xb1, 0x2e, 0x53,
		0xc7, 0x44, 0x19, 0x0b, 0xc5, 0xae, 0xfc, 0xe8, 0x78, 0xe9, 0x06, 0xe5, 0xe0, 0x47, 0x03, 0x96,
		0xe4, 0xcd, 0xc7, 0x94, 0xc0, 0x92, 0x1c, 0x74, 0x4a, 0x97, 0x25, 0x39, 0x89, 0xc8, 0x44, 0x2a,
		0x18, 0xb7, 0x1d, 0xa7, 0x77, 0xa3, 0xc4, 0xb6, 0xe3, 0xc4, 0xc9, 0xda, 0x92, 0xed, 0x78, 0xe0,
		0xd8, 0xb6, 0x18, 0xf8, 0xf2, 0x49, 0xfa, 0xcf, 0x4d, 0x4f, 0xb8, 0x4f, 0x72, 0xc0, 0xb0, 0x5e,
		0x24, 0xb6, 0xae, 0x40, 0x2d, 0xf7, 0x6c, 0xb6, 0xa8, 0xa8, 0x4a, 0x9d, 0xc9, 0x36, 0x7a, 0x54,
		0x6a, 0x7a, 0x35, 0xf7, 0x89, 0xdd, 0xb4, 0x1e, 0xee, 0x5c, 0x85, 0x72, 0xee, 0xcb, 0x96, 0xbc,
		0xc4, 0x80, 0x76, 0x19, 0x13, 0x03, 0x68, 0x6c, 0xa6, 0xca, 0x6e, 0x85, 0xd9, 0xae, 0x30, 0xfb,
		0xa9, 0xb3, 0x21, 0x53, 0x9f, 0xdd, 0x56, 0x6a, 0xc0, 0xd0, 0xf9, 0x62, 0x8f, 0xa5, 0xfd, 0x97,
		0x7a, 0x56, 0x40, 0x74, 0x07, 0x26, 0xc5, 0x18, 0x21, 0x6e, 0xba, 0xf6, 0x2b, 0x3b, 0x4d, 0x26,
		0xe0, 0x89, 0x42, 0x51, 0x91, 0xd0, 0x26, 0x1a, 0xda, 0x44, 0xa4, 0xb8, 0xa8, 0xf0, 0x44, 0x46,
		0x61, 0xf3, 0x5c, 0xd3, 0x97, 0x80, 0x4b, 0x0a, 0xd2, 0x4b, 0xe3, 0xeb, 0x0b, 0x24, 0xe0, 0xaa,
		0xdd, 0x06, 0x09, 0xb8, 0x5b, 0x27, 0x6d, 0xe7, 0xf4, 0xb2, 0x73, 0x79, 0x7e, 0x71, 0x7a, 0x89,
		0xa4, 0x02, 0x6d, 0xf7, 0xe7, 0xd8, 0xf7, 0xa6, 0x93, 0x62, 0xcb, 0xf5, 0xa2, 0x3d, 0x16, 0x6b,
		0x2c, 0xd6, 0x58, 0xac, 0xb1, 0x58, 0x63, 0xb1, 0xc6, 0x62, 0x8d, 0xc5, 0xba, 0xf2, 0x19, 0x80,
		0x8f, 0x8e, 0x17, 0xfd, 0x25, 0x99, 0x24, 0xbf, 0x63, 0x1a, 0x95, 0x6a, 0x9b, 0x2e, 0x89, 0xdf,
		0x1d, 0xaf, 0xbf, 0xfc, 0xfb, 0x3e, 0xf6, 0x88, 0x4f, 0xe1, 0x13, 0xfa, 0xd7, 0x13, 0xfb, 0x3a,
		0x78, 0xc0, 0x3e, 0xe4, 0x15, 0xe6, 0x91, 0x93, 0xff, 0xe2, 0xa2, 0x1c, 0xea, 0x6d, 0xe5, 0x45,
		0x45, 0x07, 0x10, 0x14, 0x0d, 0x33, 0xb6, 0x9a, 0x7c, 0x20, 0x18, 0x4f, 0xe7, 0x56, 0x05, 0x21,
		0x21, 0x9b, 0xa4, 0x40, 0x50, 0xf4, 0x02, 0x85, 0x0f, 0x22, 0x28, 0x1a, 0x38, 0x0c, 0x1c, 0x06,
		0x0e, 0x97, 0x10, 0x87, 0x11, 0x14, 0x1d, 0x0e, 0x6b, 0xff, 0x82, 0xa2, 0x01, 0xb9, 0xa6, 0x20,
		0xf7, 0xd1, 0xf1, 0x10, 0x0d, 0x0d, 0xc8, 0xa5, 0x92, 0x02, 0xd1, 0xd0, 0x88, 0x86, 0x56, 0x8d,
		0x86, 0x8e, 0x19, 0x9e, 0xe8, 0x81, 0xcf, 0x31, 0xdb, 0xd2, 0x4e, 0x62, 0x9c, 0xd3, 0x3b, 0x9c,
		0xdc, 0x51, 0x4a, 0x1c, 0xb3, 0x27, 0xfd, 0x8c, 0xca, 0x18, 0xf3, 0x5f, 0x0d, 0x44, 0x32, 0x27,
		0x3c, 0xa7, 0xb6, 0xfb, 0x50, 0xe6, 0x79, 0xaf, 0x74, 0xc5, 0x32, 0x27, 0x12, 0x9a, 0x4a, 0x88,
		0x9a, 0xe9, 0x68, 0xe6, 0x8c, 0x7e, 0xd4, 0xca, 0x1b, 0xce, 0x9c, 0x3c, 0x61, 0x6a, 0x18, 0x8a,
		0x5a, 0x18, 0xf9, 0x6c, 0x50, 0x51, 0xe5, 0x37, 0x9b, 0x4d, 0x60, 0x70, 0x80, 0xf6, 0x0b, 0xc3,
		0x2f, 0x0c, 0xbf, 0x40, 0x62, 0x20, 0x31, 0x90, 0x18, 0x48, 0x0c, 0xd3, 0x2f, 0x11, 0x88, 0x09,
		0x75, 0xff, 0x36, 0x44, 0x8d, 0x94, 0x7f, 0x0c, 0x10, 0x3e, 0x40, 0x10, 0x1e, 0x0b, 0xeb, 0xde,
		0x15, 0xf7, 0x1c, 0x14, 0xbe, 0xa0, 0xbd, 0x25, 0x3e, 0x4a, 0x18, 0xef, 0xae, 0x27, 0x8d, 0xbf,
		0x3e, 0x95, 0xc3, 0x3a, 0x1c, 0x24, 0x90, 0x8a, 0x72, 0xa9, 0x26, 0xd2, 0x47, 0xc5, 0x18, 0xe8,
		0x26, 0x64, 0x52, 0xc0, 0x47, 0x02, 0x1f, 0x89, 0xaa, 0x8f, 0x24, 0xc0, 0x9a, 0xd5, 0x3f, 0xba,
		0x9b, 0xe4, 0x93, 0xf4, 0x45, 0x3f, 0xfa, 0xb7, 0x13, 0x4f, 0x49, 0x56, 0xaf, 0xd3, 0x7a, 0x4b,
		0xf1, 0x96, 0x4c, 0x3d, 0xd1, 0x1c, 0x58, 0x59, 0xb5, 0xc4, 0xa3, 0x2b, 0x0c, 0x78, 0x4d, 0xa6,
		0x83, 0xf2, 0xf9, 0x4c, 0xa6, 0x03, 0x6d, 0x1e, 0x93, 0x54, 0x62, 0x53, 0x89, 0x9e, 0x43, 0x7c,
		0xb2, 0x76, 0xc4, 0xf2, 0x9c, 0x24, 0x4e, 0x0a, 0x57, 0x07, 0x32, 0xec, 0x37, 0x49, 0x9a, 0x34,
		0x35, 0x54, 0xcd, 0xf5, 0x9a, 0x58, 0x93, 0xc9, 0x58, 0x0e, 0x2c, 0x9e, 0xd7, 0x24, 0xde, 0xa8,
		0x02, 0x35, 0x5f, 0x32, 0x59, 0xa0, 0xa2, 0xea, 0x70, 0x16, 0x8b, 0xe8, 0x51, 0x86, 0xe9, 0x15,
		0x5f, 0xc6, 0x63, 0xe7, 0x8b, 0x50, 0x78, 0x13, 0xec, 0xb2, 0x21, 0xb5, 0xc6, 0xc7, 0x2a, 0x17,
		0x37, 0x20, 0x1a, 0xb3, 0x4c, 0x4c, 0xab, 0x8c, 0x65, 0x62, 0x48, 0x9c, 0xa9, 0xca, 0xa1, 0x85,
		0x39, 0xb5, 0x30, 0xc7, 0x2a, 0x73, 0x2e, 0x53, 0x85, 0x25, 0xce, 0x14, 0x3b, 0x69, 0x36, 0x9a,
		0xa7, 0x3b, 0xc7, 0x19, 0x0b, 0xcb, 0xe6, 0x4c, 0xd6, 0x12, 0xf8, 0xda, 0x06, 0x5f, 0xca, 0xcc,
		0x01, 0xf3, 0x02, 0xa0, 0x0e, 0xd1, 0x82, 0x68, 0x69, 0x13, 0x2d, 0xba, 0x5d, 0x51, 0xc5, 0xbe,
		0xb8, 0x69, 0x67, 0xb4, 0x26, 0x93, 0x6e, 0x8c, 0xd5, 0x13, 0xcf, 0x65, 0x49, 0xde, 0x12, 0xb9,
		0xd8, 0x13, 0x33, 0xd4, 0x2d, 0xd2, 0x26, 0x99, 0xbf, 0x59, 0xd6, 0xb2, 0x69, 0xe6, 0x6d, 0x9e,
		0xa9, 0x34, 0x2a, 0x98, 0xf1, 0xba, 0xdc, 0xaa, 0x24, 0x1c, 0xf0, 0x00, 0xf1, 0xd5, 0x36, 0xf6,
		0x5f, 0x9e, 0xf8, 0xde, 0xf2, 0x44, 0xff, 0xf5, 0xe7, 0x75, 0xec, 0xa6, 0xc8, 0x7d, 0x85, 0x3a,
		0x6f, 0x4c, 0x9d, 0x87, 0xdb, 0x1d, 0xa6, 0xed, 0xed, 0x92, 0x02, 0x01, 0x50, 0x4b, 0x0c, 0x9e,
		0xbf, 0x4b, 0x71, 0xe4, 0x3a, 0xd3, 0x09, 0x07, 0x84, 0x63, 0xad, 0x60, 0x54, 0x81, 0x51, 0x05,
		0x46, 0x15, 0xec, 0xfc, 0x60, 0x54, 0xd9, 0xbd, 0x51, 0x85, 0x05, 0xe7, 0x45, 0x60, 0x1d, 0xc2,
		0x05, 0xe1, 0xaa, 0xac, 0x59, 0x65, 0x38, 0xea, 0xc6, 0x59, 0x3d, 0xe9, 0xbc, 0x64, 0x56, 0x15,
		0x8e, 0xc2, 0x05, 0xb3, 0x8a, 0x3e, 0xb3, 0x0a, 0x13, 0x11, 0x89, 0x76, 0x95, 0xf0, 0x35, 0xe4,
		0x3f, 0xce, 0x6f, 0x8a, 0xa4, 0x06, 0xe8, 0xf4, 0xb0, 0xac, 0xc0, 0xb2, 0xb2, 0x2f, 0x96, 0x15,
		0x24, 0x34, 0x84, 0xc3, 0xda, 0xff, 0x84, 0x06, 0x00, 0xb0, 0x19, 0x00, 0x46, 0x32, 0x43, 0x55,
		0x92, 0x19, 0x20, 0x11, 0x66, 0x24, 0x62, 0xa9, 0x9e, 0x23, 0x99, 0x01, 0x7a, 0x09, 0x95, 0x14,
		0x07, 0x95, 0xcc, 0x90, 0x81, 0xba, 0x59, 0xaf, 0xc5, 0xdc, 0x10, 0xb4, 0xfc, 0xf2, 0x75, 0x70,
		0xef, 0x54, 0x16, 0x77, 0xe1, 0xde, 0x81, 0x05, 0x1a, 0x16, 0xe8, 0x4a, 0xb9, 0x77, 0x28, 0xe0,
		0xad, 0x00, 0xe2, 0x10, 0x25, 0x88, 0x92, 0x36, 0x51, 0x32, 0xed, 0xcc, 0x79, 0x74, 0xbc, 0xee,
		0xa2, 0xb8, 0x61, 0xf4, 0x59, 0x32, 0xef, 0x0d, 0x41, 0x8d, 0x82, 0xd3, 0x26, 0xef, 0xe1, 0x74,
		0xa7, 0x0d, 0xb1, 0xe8, 0x32, 0xcd, 0x57, 0xf3, 0x7b, 0x5e, 0xb1, 0x63, 0x35, 0x35, 0x3c, 0xb3,
		0xa2, 0xe3, 0xa6, 0x0d, 0x3e, 0xbf, 0x4a, 0x02, 0x14, 0x71, 0x28, 0xe2, 0x50, 0xc4, 0xa1, 0x3d,
		0x40, 0x11, 0x37, 0xa1, 0x88, 0x93, 0xe0, 0x5b, 0x05, 0xc6, 0x21, 0x4c, 0x10, 0xa6, 0xca, 0xaa,
		0xe2, 0x9e, 0xdf, 0x0d, 0x8b, 0x67, 0xac, 0x3e, 0x4b, 0xa6, 0x89, 0x53, 0x14, 0x29, 0xa8, 0xe2,
		0xfa, 0x54, 0x71, 0x6a, 0x79, 0x2f, 0x9a, 0x2e, 0xfe, 0x29, 0xb7, 0xac, 0x96, 0x9a, 0x32, 0xfe,
		0x24, 0x3d, 0x79, 0x27, 0xc7, 0xd2, 0x7f, 0xa6, 0xab, 0xe4, 0xb1, 0x36, 0x50, 0xcc, 0xa1, 0x98,
		0x43, 0x31, 0x87, 0x2e, 0x01, 0xc5, 0x7c, 0xf7, 0x8a, 0x39, 0x03, 0xca, 0xd5, 0x21, 0x1d, 0x82,
		0x05, 0xc1, 0xaa, 0xac, 0x92, 0xfe, 0x24, 0xbd, 0xee, 0x8a, 0xd3, 0x93, 0x4e, 0x4b, 0xa6, 0xb3,
		0xd3, 0x35, 0x2d, 0x68, 0xee, 0xfa, 0x34, 0x77, 0x16, 0x18, 0x12, 0xf5, 0xf7, 0x3f, 0x57, 0xf7,
		0x44, 0x99, 0x4e, 0x35, 0xc6, 0xd0, 0x5c, 0xa6, 0x33, 0x9d, 0x01, 0xe8, 0x25, 0x3b, 0x53, 0x66,
		0x7b, 0x27, 0xb5, 0x3b, 0x29, 0xc3, 0xc8, 0xee, 0x3e, 0xa5, 0x92, 0x67, 0x86, 0x92, 0x91, 0xaf,
		0x4c, 0x6c, 0xa5, 0x9a, 0xe7, 0x93, 0xf4, 0xca, 0x57, 0xce, 0x33, 0xe8, 0x94, 0xae, 0x7a, 0x9e,
		0x04, 0xbd, 0x8e, 0xae, 0xc7, 0x19, 0xad, 0xe9, 0x99, 0x3c, 0x35, 0x5c, 0xc5, 0xcb, 0x70, 0x51,
		0xcf, 0xc4, 0xa9, 0x53, 0x03, 0xe1, 0xb2, 0x54, 0xf5, 0xdc, 0x69, 0x64, 0x78, 0x36, 0x13, 0x54,
		0xd4, 0x00, 0x93, 0xc9, 0x24, 0x7a, 0x54, 0xc0, 0xf2, 0x65, 0x4b, 0xe8, 0x28, 0xc9, 0x86, 0x72,
		0x59, 0x90, 0x93, 0x5d, 0xcb, 0x09, 0xd2, 0x3a, 0xd3, 0x9b, 0x21, 0x7d, 0x62, 0x93, 0x14, 0x28,
		0x98, 0xb5, 0x40, 0xe1, 0x83, 0x48, 0xae, 0x07, 0x0e, 0x03, 0x87, 0x81, 0xc3, 0x25, 0xc4, 0x61,
		0xa4, 0xd7, 0x87, 0xc3, 0xda, 0xbf, 0xe4, 0x61, 0x40, 0xae, 0x29, 0xc8, 0x5d, 0xd9, 0x87, 0x90,
		0x40, 0x0c, 0xe4, 0xa5, 0x92, 0x02, 0x6f, 0x43, 0x83, 0x9b, 0x45, 0xd5, 0xcd, 0xb2, 0xee, 0x60,
		0xdd, 0x3c, 0xa4, 0x3b, 0x5b, 0x56, 0x2e, 0xb4, 0x7e, 0xe2, 0xe1, 0x4e, 0xbc, 0x2e, 0xd4, 0x31,
		0x51, 0xc6, 0x92, 0xea, 0x7f, 0x39, 0x8a, 0x75, 0x34, 0xad, 0x83, 0x75, 0xe9, 0xfd, 0x60, 0xfd,
		0x25, 0xfe, 0x70, 0x9c, 0xcd, 0x35, 0xeb, 0x75, 0xa7, 0xeb, 0xf1, 0x9f, 0xd6, 0xfa, 0x15, 0x96,
		0x67, 0x0b, 0x3b, 0x32, 0x3b, 0x9a, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff,
		0xff, 0x04, 0x58, 0x8e, 0xbd, 0x69, 0x8c, 0x01, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

