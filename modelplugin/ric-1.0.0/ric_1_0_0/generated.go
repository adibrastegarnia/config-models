// Code generated by YGOT. DO NOT EDIT.
/*
Package ric_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/adibrastegarnia/go/pkg/mod/github.com/openconfig/ygot@v0.8.11/genutil/names.go
using the following YANG input files:
	- o-ran-sc-root-v1@2020-02-20.yang
	- o-ran-sc-types-v1@2020-02-20.yang
	- o-ran-sc-interfaces-v1@2020-03-09.yang
	- o-ran-sc-ric-xapp-desc-v1@2020-02-25.yang
	- o-ran-sc-ric-gnb-status-v1@2020-01-29.yang
	- o-ran-sc-ric-ueec-config-v1@2020-01-29.yang
Imported modules were sourced from:
	- yang/ric-1.0.0/...
*/
package ric_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ControlledElement	*ORanScRootV1_ControlledElement	`path:"controlled-element" module:"o-ran-sc-root-v1"`
	Interfaces	*IETFInterfaces_Interfaces	`path:"interfaces" module:"ietf-interfaces"`
	InterfacesState	*IETFInterfaces_InterfacesState	`path:"interfaces-state" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFInterfaces_Interfaces represents the /ietf-interfaces/interfaces YANG schema element.
type IETFInterfaces_Interfaces struct {
	Interface	map[string]*IETFInterfaces_Interfaces_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_Interfaces) NewInterface(Name string) (*IETFInterfaces_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFInterfaces_InterfacesState represents the /ietf-interfaces/interfaces-state YANG schema element.
type IETFInterfaces_InterfacesState struct {
	Interface	map[string]*IETFInterfaces_InterfacesState_Interface	`path:"interface" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// IETFInterfaces_InterfacesState struct. The keys of the list are populated from the input
// arguments.
func (t *IETFInterfaces_InterfacesState) NewInterface(Name string) (*IETFInterfaces_InterfacesState_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*IETFInterfaces_InterfacesState_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &IETFInterfaces_InterfacesState_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFInterfaces_InterfacesState_Interface represents the /ietf-interfaces/interfaces-state/interface YANG schema element.
type IETFInterfaces_InterfacesState_Interface struct {
	AdminStatus	E_IETFInterfaces_InterfacesState_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_InterfacesState_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_InterfacesState_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_InterfacesState_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_InterfacesState_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFInterfaces_InterfacesState_Interface_Statistics represents the /ietf-interfaces/interfaces-state/interface/statistics YANG schema element.
type IETFInterfaces_InterfacesState_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_InterfacesState_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_InterfacesState_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_InterfacesState_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_InterfacesState_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFInterfaces_Interfaces_Interface represents the /ietf-interfaces/interfaces/interface YANG schema element.
type IETFInterfaces_Interfaces_Interface struct {
	AdminStatus	E_IETFInterfaces_Interfaces_Interface_AdminStatus	`path:"admin-status" module:"ietf-interfaces"`
	Description	*string	`path:"description" module:"ietf-interfaces"`
	Enabled	*bool	`path:"enabled" module:"ietf-interfaces"`
	HigherLayerIf	[]string	`path:"higher-layer-if" module:"ietf-interfaces"`
	IfIndex	*int32	`path:"if-index" module:"ietf-interfaces"`
	LastChange	*string	`path:"last-change" module:"ietf-interfaces"`
	LinkUpDownTrapEnable	E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable	`path:"link-up-down-trap-enable" module:"ietf-interfaces"`
	LowerLayerIf	[]string	`path:"lower-layer-if" module:"ietf-interfaces"`
	Name	*string	`path:"name" module:"ietf-interfaces"`
	OperStatus	E_IETFInterfaces_Interfaces_Interface_OperStatus	`path:"oper-status" module:"ietf-interfaces"`
	PhysAddress	*string	`path:"phys-address" module:"ietf-interfaces"`
	Speed	*uint64	`path:"speed" module:"ietf-interfaces"`
	Statistics	*IETFInterfaces_Interfaces_Interface_Statistics	`path:"statistics" module:"ietf-interfaces"`
	Type	E_IETFInterfaces_InterfaceType	`path:"type" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *IETFInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFInterfaces_Interfaces_Interface_Statistics represents the /ietf-interfaces/interfaces/interface/statistics YANG schema element.
type IETFInterfaces_Interfaces_Interface_Statistics struct {
	DiscontinuityTime	*string	`path:"discontinuity-time" module:"ietf-interfaces"`
	InBroadcastPkts	*uint64	`path:"in-broadcast-pkts" module:"ietf-interfaces"`
	InDiscards	*uint32	`path:"in-discards" module:"ietf-interfaces"`
	InErrors	*uint32	`path:"in-errors" module:"ietf-interfaces"`
	InMulticastPkts	*uint64	`path:"in-multicast-pkts" module:"ietf-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"ietf-interfaces"`
	InUnicastPkts	*uint64	`path:"in-unicast-pkts" module:"ietf-interfaces"`
	InUnknownProtos	*uint32	`path:"in-unknown-protos" module:"ietf-interfaces"`
	OutBroadcastPkts	*uint64	`path:"out-broadcast-pkts" module:"ietf-interfaces"`
	OutDiscards	*uint32	`path:"out-discards" module:"ietf-interfaces"`
	OutErrors	*uint32	`path:"out-errors" module:"ietf-interfaces"`
	OutMulticastPkts	*uint64	`path:"out-multicast-pkts" module:"ietf-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"ietf-interfaces"`
	OutUnicastPkts	*uint64	`path:"out-unicast-pkts" module:"ietf-interfaces"`
}

// IsYANGGoStruct ensures that IETFInterfaces_Interfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFInterfaces_Interfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFInterfaces_Interfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFInterfaces_Interfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement represents the /o-ran-sc-root-v1/controlled-element YANG schema element.
type ORanScRootV1_ControlledElement struct {
	AdministrativeControl	E_ORanScTypesV1_AdministrativeControl	`path:"administrative-control" module:"o-ran-sc-root-v1"`
	AdministrativeState	E_ORanScTypesV1_AdministrativeState	`path:"administrative-state" module:"o-ran-sc-root-v1"`
	ControlledFunction	map[string]*ORanScRootV1_ControlledElement_ControlledFunction	`path:"controlled-function" module:"o-ran-sc-root-v1"`
	ControlledIdentifier	map[string]*ORanScRootV1_ControlledElement_ControlledIdentifier	`path:"controlled-identifier" module:"o-ran-sc-root-v1"`
	Identifier	*string	`path:"identifier" module:"o-ran-sc-root-v1"`
	Label	*string	`path:"label" module:"o-ran-sc-root-v1"`
	LifecycleState	E_ORanScTypesV1_LifecycleState	`path:"lifecycle-state" module:"o-ran-sc-root-v1"`
	Name	*string	`path:"name" module:"o-ran-sc-root-v1"`
	OperationalState	E_ORanScTypesV1_OperationalState	`path:"operational-state" module:"o-ran-sc-root-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement) IsYANGGoStruct() {}

// NewControlledFunction creates a new entry in the ControlledFunction list of the
// ORanScRootV1_ControlledElement struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement) NewControlledFunction(Identifier string) (*ORanScRootV1_ControlledElement_ControlledFunction, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlledFunction == nil {
		t.ControlledFunction = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction)
	}

	key := Identifier

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlledFunction[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlledFunction", key)
	}

	t.ControlledFunction[key] = &ORanScRootV1_ControlledElement_ControlledFunction{
		Identifier: &Identifier,
	}

	return t.ControlledFunction[key], nil
}

// NewControlledIdentifier creates a new entry in the ControlledIdentifier list of the
// ORanScRootV1_ControlledElement struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement) NewControlledIdentifier(AuthorityRef string) (*ORanScRootV1_ControlledElement_ControlledIdentifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlledIdentifier == nil {
		t.ControlledIdentifier = make(map[string]*ORanScRootV1_ControlledElement_ControlledIdentifier)
	}

	key := AuthorityRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlledIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlledIdentifier", key)
	}

	t.ControlledIdentifier[key] = &ORanScRootV1_ControlledElement_ControlledIdentifier{
		AuthorityRef: &AuthorityRef,
	}

	return t.ControlledIdentifier[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction represents the /o-ran-sc-root-v1/controlled-element/controlled-function YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction struct {
	AdministrativeControl	E_ORanScTypesV1_AdministrativeControl	`path:"administrative-control" module:"o-ran-sc-root-v1"`
	AdministrativeState	E_ORanScTypesV1_AdministrativeState	`path:"administrative-state" module:"o-ran-sc-root-v1"`
	Config	*ORanScRootV1_ControlledElement_ControlledFunction_Config	`path:"config" module:"o-ran-sc-ric-ueec-config-v1"`
	ControlledIdentifier	map[string]*ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier	`path:"controlled-identifier" module:"o-ran-sc-root-v1"`
	FunctionType	E_ORanScTypesV1_ControlFunctionType	`path:"function-type" module:"o-ran-sc-root-v1"`
	Identifier	*string	`path:"identifier" module:"o-ran-sc-root-v1"`
	InterfaceReference	[]string	`path:"interface-reference" module:"o-ran-sc-interfaces-v1"`
	Label	*string	`path:"label" module:"o-ran-sc-root-v1"`
	LifecycleState	E_ORanScTypesV1_LifecycleState	`path:"lifecycle-state" module:"o-ran-sc-root-v1"`
	Name	*string	`path:"name" module:"o-ran-sc-root-v1"`
	Nodes	*ORanScRootV1_ControlledElement_ControlledFunction_Nodes	`path:"nodes" module:"o-ran-sc-ric-gnb-status-v1"`
	OperationalState	E_ORanScTypesV1_OperationalState	`path:"operational-state" module:"o-ran-sc-root-v1"`
	Xapps	*ORanScRootV1_ControlledElement_ControlledFunction_Xapps	`path:"xapps" module:"o-ran-sc-ric-xapp-desc-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction) IsYANGGoStruct() {}

// NewControlledIdentifier creates a new entry in the ControlledIdentifier list of the
// ORanScRootV1_ControlledElement_ControlledFunction struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement_ControlledFunction) NewControlledIdentifier(AuthorityRef string) (*ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlledIdentifier == nil {
		t.ControlledIdentifier = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier)
	}

	key := AuthorityRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlledIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlledIdentifier", key)
	}

	t.ControlledIdentifier[key] = &ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier{
		AuthorityRef: &AuthorityRef,
	}

	return t.ControlledIdentifier[key], nil
}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Identifier == nil {
		return nil, fmt.Errorf("nil value for key Identifier")
	}

	return map[string]interface{}{
		"identifier": *t.Identifier,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Config represents the /o-ran-sc-root-v1/controlled-element/controlled-function/config YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Config struct {
	AdministrativeControl	E_ORanScTypesV1_AdministrativeControl	`path:"administrative-control" module:"o-ran-sc-ric-ueec-config-v1"`
	AdministrativeState	E_ORanScTypesV1_AdministrativeState	`path:"administrative-state" module:"o-ran-sc-ric-ueec-config-v1"`
	Control	*ORanScRootV1_ControlledElement_ControlledFunction_Config_Control	`path:"control" module:"o-ran-sc-ric-ueec-config-v1"`
	ControlledIdentifier	map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier	`path:"controlled-identifier" module:"o-ran-sc-ric-ueec-config-v1"`
	Identifier	*string	`path:"identifier" module:"o-ran-sc-ric-ueec-config-v1"`
	Label	*string	`path:"label" module:"o-ran-sc-ric-ueec-config-v1"`
	LifecycleState	E_ORanScTypesV1_LifecycleState	`path:"lifecycle-state" module:"o-ran-sc-ric-ueec-config-v1"`
	Name	*string	`path:"name" module:"o-ran-sc-ric-ueec-config-v1"`
	Namespace	*string	`path:"namespace" module:"o-ran-sc-ric-ueec-config-v1"`
	OperationalState	E_ORanScTypesV1_OperationalState	`path:"operational-state" module:"o-ran-sc-ric-ueec-config-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Config) IsYANGGoStruct() {}

// NewControlledIdentifier creates a new entry in the ControlledIdentifier list of the
// ORanScRootV1_ControlledElement_ControlledFunction_Config struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config) NewControlledIdentifier(AuthorityRef string) (*ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlledIdentifier == nil {
		t.ControlledIdentifier = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier)
	}

	key := AuthorityRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlledIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlledIdentifier", key)
	}

	t.ControlledIdentifier[key] = &ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier{
		AuthorityRef: &AuthorityRef,
	}

	return t.ControlledIdentifier[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Config_Control represents the /o-ran-sc-root-v1/controlled-element/controlled-function/config/control YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Config_Control struct {
	Active	*bool	`path:"active" module:"o-ran-sc-ric-ueec-config-v1"`
	InterfaceId	*ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId	`path:"interfaceId" module:"o-ran-sc-ric-ueec-config-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Config_Control implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Config_Control) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_Control) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Config_Control"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_Control) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId represents the /o-ran-sc-root-v1/controlled-element/controlled-function/config/control/interfaceId YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId struct {
	GlobalENBId	*ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId	`path:"globalENBId" module:"o-ran-sc-ric-ueec-config-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId represents the /o-ran-sc-root-v1/controlled-element/controlled-function/config/control/interfaceId/globalENBId YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId struct {
	ENBId	*uint64	`path:"eNBId" module:"o-ran-sc-ric-ueec-config-v1"`
	PlmnId	*string	`path:"plmnId" module:"o-ran-sc-ric-ueec-config-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_Control_InterfaceId_GlobalENBId) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier represents the /o-ran-sc-root-v1/controlled-element/controlled-function/config/controlled-identifier YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier struct {
	AuthorityRef	*string	`path:"authority-ref" module:"o-ran-sc-ric-ueec-config-v1"`
	Identifer	*string	`path:"identifer" module:"o-ran-sc-ric-ueec-config-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AuthorityRef == nil {
		return nil, fmt.Errorf("nil value for key AuthorityRef")
	}

	return map[string]interface{}{
		"authority-ref": *t.AuthorityRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Config_ControlledIdentifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier represents the /o-ran-sc-root-v1/controlled-element/controlled-function/controlled-identifier YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier struct {
	AuthorityRef	*string	`path:"authority-ref" module:"o-ran-sc-root-v1"`
	Identifer	*string	`path:"identifer" module:"o-ran-sc-root-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AuthorityRef == nil {
		return nil, fmt.Errorf("nil value for key AuthorityRef")
	}

	return map[string]interface{}{
		"authority-ref": *t.AuthorityRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_ControlledIdentifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Nodes represents the /o-ran-sc-root-v1/controlled-element/controlled-function/nodes YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Nodes struct {
	Node	map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node	`path:"node" module:"o-ran-sc-ric-gnb-status-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Nodes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Nodes) IsYANGGoStruct() {}

// NewNode creates a new entry in the Node list of the
// ORanScRootV1_ControlledElement_ControlledFunction_Nodes struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes) NewNode(Identifier string) (*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node)
	}

	key := Identifier

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node{
		Identifier: &Identifier,
	}

	return t.Node[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Nodes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node represents the /o-ran-sc-root-v1/controlled-element/controlled-function/nodes/node YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node struct {
	AdministrativeControl	E_ORanScTypesV1_AdministrativeControl	`path:"administrative-control" module:"o-ran-sc-ric-gnb-status-v1"`
	AdministrativeState	E_ORanScTypesV1_AdministrativeState	`path:"administrative-state" module:"o-ran-sc-ric-gnb-status-v1"`
	ConnectionStatus	E_ORanScRicGnbStatusV1_ConnectionStatusType	`path:"connection-status" module:"o-ran-sc-ric-gnb-status-v1"`
	ControlledIdentifier	map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier	`path:"controlled-identifier" module:"o-ran-sc-ric-gnb-status-v1"`
	E2ApProtocol	E_ORanScRicGnbStatusV1_E2ApProtocolType	`path:"e2ap-protocol" module:"o-ran-sc-ric-gnb-status-v1"`
	Identifier	*string	`path:"identifier" module:"o-ran-sc-ric-gnb-status-v1"`
	Ip	*string	`path:"ip" module:"o-ran-sc-ric-gnb-status-v1"`
	Label	*string	`path:"label" module:"o-ran-sc-ric-gnb-status-v1"`
	LifecycleState	E_ORanScTypesV1_LifecycleState	`path:"lifecycle-state" module:"o-ran-sc-ric-gnb-status-v1"`
	Name	*string	`path:"name" module:"o-ran-sc-ric-gnb-status-v1"`
	NbId	*string	`path:"nb-id" module:"o-ran-sc-ric-gnb-status-v1"`
	Node	E_ORanScTypesV1_ControlElementType	`path:"node" module:"o-ran-sc-ric-gnb-status-v1"`
	OperationalState	E_ORanScTypesV1_OperationalState	`path:"operational-state" module:"o-ran-sc-ric-gnb-status-v1"`
	PlmnId	*string	`path:"plmn-id" module:"o-ran-sc-ric-gnb-status-v1"`
	Port	*uint16	`path:"port" module:"o-ran-sc-ric-gnb-status-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node) IsYANGGoStruct() {}

// NewControlledIdentifier creates a new entry in the ControlledIdentifier list of the
// ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node) NewControlledIdentifier(AuthorityRef string) (*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlledIdentifier == nil {
		t.ControlledIdentifier = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier)
	}

	key := AuthorityRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlledIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlledIdentifier", key)
	}

	t.ControlledIdentifier[key] = &ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier{
		AuthorityRef: &AuthorityRef,
	}

	return t.ControlledIdentifier[key], nil
}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Identifier == nil {
		return nil, fmt.Errorf("nil value for key Identifier")
	}

	return map[string]interface{}{
		"identifier": *t.Identifier,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier represents the /o-ran-sc-root-v1/controlled-element/controlled-function/nodes/node/controlled-identifier YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier struct {
	AuthorityRef	*string	`path:"authority-ref" module:"o-ran-sc-ric-gnb-status-v1"`
	Identifer	*string	`path:"identifer" module:"o-ran-sc-ric-gnb-status-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AuthorityRef == nil {
		return nil, fmt.Errorf("nil value for key AuthorityRef")
	}

	return map[string]interface{}{
		"authority-ref": *t.AuthorityRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Nodes_Node_ControlledIdentifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Xapps represents the /o-ran-sc-root-v1/controlled-element/controlled-function/xapps YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Xapps struct {
	Xapp	map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp	`path:"xapp" module:"o-ran-sc-ric-xapp-desc-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Xapps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Xapps) IsYANGGoStruct() {}

// NewXapp creates a new entry in the Xapp list of the
// ORanScRootV1_ControlledElement_ControlledFunction_Xapps struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps) NewXapp(Name string) (*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Xapp == nil {
		t.Xapp = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Xapp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Xapp", key)
	}

	t.Xapp[key] = &ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp{
		Name: &Name,
	}

	return t.Xapp[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Xapps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp represents the /o-ran-sc-root-v1/controlled-element/controlled-function/xapps/xapp YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp struct {
	AdministrativeControl	E_ORanScTypesV1_AdministrativeControl	`path:"administrative-control" module:"o-ran-sc-ric-xapp-desc-v1"`
	AdministrativeState	E_ORanScTypesV1_AdministrativeState	`path:"administrative-state" module:"o-ran-sc-ric-xapp-desc-v1"`
	ControlledIdentifier	map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier	`path:"controlled-identifier" module:"o-ran-sc-ric-xapp-desc-v1"`
	Identifier	*string	`path:"identifier" module:"o-ran-sc-ric-xapp-desc-v1"`
	Label	*string	`path:"label" module:"o-ran-sc-ric-xapp-desc-v1"`
	LifecycleState	E_ORanScTypesV1_LifecycleState	`path:"lifecycle-state" module:"o-ran-sc-ric-xapp-desc-v1"`
	Name	*string	`path:"name" module:"o-ran-sc-ric-xapp-desc-v1"`
	Namespace	*string	`path:"namespace" module:"o-ran-sc-ric-xapp-desc-v1"`
	OperationalState	E_ORanScTypesV1_OperationalState	`path:"operational-state" module:"o-ran-sc-ric-xapp-desc-v1"`
	OverrideFile	*string	`path:"override-file" module:"o-ran-sc-ric-xapp-desc-v1"`
	ReleaseName	*string	`path:"release-name" module:"o-ran-sc-ric-xapp-desc-v1"`
	Version	*string	`path:"version" module:"o-ran-sc-ric-xapp-desc-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp) IsYANGGoStruct() {}

// NewControlledIdentifier creates a new entry in the ControlledIdentifier list of the
// ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp struct. The keys of the list are populated from the input
// arguments.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp) NewControlledIdentifier(AuthorityRef string) (*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ControlledIdentifier == nil {
		t.ControlledIdentifier = make(map[string]*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier)
	}

	key := AuthorityRef

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ControlledIdentifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ControlledIdentifier", key)
	}

	t.ControlledIdentifier[key] = &ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier{
		AuthorityRef: &AuthorityRef,
	}

	return t.ControlledIdentifier[key], nil
}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier represents the /o-ran-sc-root-v1/controlled-element/controlled-function/xapps/xapp/controlled-identifier YANG schema element.
type ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier struct {
	AuthorityRef	*string	`path:"authority-ref" module:"o-ran-sc-ric-xapp-desc-v1"`
	Identifer	*string	`path:"identifer" module:"o-ran-sc-ric-xapp-desc-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AuthorityRef == nil {
		return nil, fmt.Errorf("nil value for key AuthorityRef")
	}

	return map[string]interface{}{
		"authority-ref": *t.AuthorityRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledFunction_Xapps_Xapp_ControlledIdentifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ORanScRootV1_ControlledElement_ControlledIdentifier represents the /o-ran-sc-root-v1/controlled-element/controlled-identifier YANG schema element.
type ORanScRootV1_ControlledElement_ControlledIdentifier struct {
	AuthorityRef	*string	`path:"authority-ref" module:"o-ran-sc-root-v1"`
	Identifer	*string	`path:"identifer" module:"o-ran-sc-root-v1"`
}

// IsYANGGoStruct ensures that ORanScRootV1_ControlledElement_ControlledIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*ORanScRootV1_ControlledElement_ControlledIdentifier) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the ORanScRootV1_ControlledElement_ControlledIdentifier struct, which is a YANG list entry.
func (t *ORanScRootV1_ControlledElement_ControlledIdentifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AuthorityRef == nil {
		return nil, fmt.Errorf("nil value for key AuthorityRef")
	}

	return map[string]interface{}{
		"authority-ref": *t.AuthorityRef,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *ORanScRootV1_ControlledElement_ControlledIdentifier) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["ORanScRootV1_ControlledElement_ControlledIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *ORanScRootV1_ControlledElement_ControlledIdentifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
)


// E_IETFInterfaces_InterfacesState_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_AdminStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (E_IETFInterfaces_InterfacesState_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_AdminStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_AdminStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 0
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_up E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 2
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_down E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 3
	// IETFInterfaces_InterfacesState_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_AdminStatus
	IETFInterfaces_InterfacesState_Interface_AdminStatus_testing E_IETFInterfaces_InterfacesState_Interface_AdminStatus = 4
)


// E_IETFInterfaces_InterfacesState_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfacesState_Interface_OperStatus. An additional value named
// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfacesState_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfacesState_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfacesState_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfacesState_Interface_OperStatus.
func (E_IETFInterfaces_InterfacesState_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_InterfacesState_Interface_OperStatus.
func (e E_IETFInterfaces_InterfacesState_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfacesState_Interface_OperStatus")
}

const (
	// IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_UNSET E_IETFInterfaces_InterfacesState_Interface_OperStatus = 0
	// IETFInterfaces_InterfacesState_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_up E_IETFInterfaces_InterfacesState_Interface_OperStatus = 2
	// IETFInterfaces_InterfacesState_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 3
	// IETFInterfaces_InterfacesState_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_testing E_IETFInterfaces_InterfacesState_Interface_OperStatus = 4
	// IETFInterfaces_InterfacesState_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_unknown E_IETFInterfaces_InterfacesState_Interface_OperStatus = 5
	// IETFInterfaces_InterfacesState_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_dormant E_IETFInterfaces_InterfacesState_Interface_OperStatus = 6
	// IETFInterfaces_InterfacesState_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_not_present E_IETFInterfaces_InterfacesState_Interface_OperStatus = 7
	// IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_InterfacesState_Interface_OperStatus
	IETFInterfaces_InterfacesState_Interface_OperStatus_lower_layer_down E_IETFInterfaces_InterfacesState_Interface_OperStatus = 8
)


// E_IETFInterfaces_Interfaces_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_AdminStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_AdminStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_AdminStatus.
func (E_IETFInterfaces_Interfaces_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_AdminStatus.
func (e E_IETFInterfaces_Interfaces_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_AdminStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_UNSET E_IETFInterfaces_Interfaces_Interface_AdminStatus = 0
	// IETFInterfaces_Interfaces_Interface_AdminStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_up E_IETFInterfaces_Interfaces_Interface_AdminStatus = 2
	// IETFInterfaces_Interfaces_Interface_AdminStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_down E_IETFInterfaces_Interfaces_Interface_AdminStatus = 3
	// IETFInterfaces_Interfaces_Interface_AdminStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_AdminStatus
	IETFInterfaces_Interfaces_Interface_AdminStatus_testing E_IETFInterfaces_Interfaces_Interface_AdminStatus = 4
)


// E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable. An additional value named
// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable.
func (e E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable")
}

const (
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_UNSET E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 0
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled corresponds to the value enabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_enabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 2
	// IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled corresponds to the value disabled of IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable
	IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable_disabled E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable = 3
)


// E_IETFInterfaces_Interfaces_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_Interfaces_Interface_OperStatus. An additional value named
// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_Interfaces_Interface_OperStatus int64

// IsYANGGoEnum ensures that IETFInterfaces_Interfaces_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_Interfaces_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_Interfaces_Interface_OperStatus.
func (E_IETFInterfaces_Interfaces_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_IETFInterfaces_Interfaces_Interface_OperStatus.
func (e E_IETFInterfaces_Interfaces_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_Interfaces_Interface_OperStatus")
}

const (
	// IETFInterfaces_Interfaces_Interface_OperStatus_UNSET corresponds to the value UNSET of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_UNSET E_IETFInterfaces_Interfaces_Interface_OperStatus = 0
	// IETFInterfaces_Interfaces_Interface_OperStatus_up corresponds to the value up of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_up E_IETFInterfaces_Interfaces_Interface_OperStatus = 2
	// IETFInterfaces_Interfaces_Interface_OperStatus_down corresponds to the value down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 3
	// IETFInterfaces_Interfaces_Interface_OperStatus_testing corresponds to the value testing of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_testing E_IETFInterfaces_Interfaces_Interface_OperStatus = 4
	// IETFInterfaces_Interfaces_Interface_OperStatus_unknown corresponds to the value unknown of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_unknown E_IETFInterfaces_Interfaces_Interface_OperStatus = 5
	// IETFInterfaces_Interfaces_Interface_OperStatus_dormant corresponds to the value dormant of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_dormant E_IETFInterfaces_Interfaces_Interface_OperStatus = 6
	// IETFInterfaces_Interfaces_Interface_OperStatus_not_present corresponds to the value not_present of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_not_present E_IETFInterfaces_Interfaces_Interface_OperStatus = 7
	// IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down corresponds to the value lower_layer_down of IETFInterfaces_Interfaces_Interface_OperStatus
	IETFInterfaces_Interfaces_Interface_OperStatus_lower_layer_down E_IETFInterfaces_Interfaces_Interface_OperStatus = 8
)


// E_ORanScRicGnbStatusV1_ConnectionStatusType is a derived int64 type which is used to represent
// the enumerated node ORanScRicGnbStatusV1_ConnectionStatusType. An additional value named
// ORanScRicGnbStatusV1_ConnectionStatusType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScRicGnbStatusV1_ConnectionStatusType int64

// IsYANGGoEnum ensures that ORanScRicGnbStatusV1_ConnectionStatusType implements the yang.GoEnum
// interface. This ensures that ORanScRicGnbStatusV1_ConnectionStatusType can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScRicGnbStatusV1_ConnectionStatusType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScRicGnbStatusV1_ConnectionStatusType.
func (E_ORanScRicGnbStatusV1_ConnectionStatusType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScRicGnbStatusV1_ConnectionStatusType.
func (e E_ORanScRicGnbStatusV1_ConnectionStatusType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScRicGnbStatusV1_ConnectionStatusType")
}

const (
	// ORanScRicGnbStatusV1_ConnectionStatusType_UNSET corresponds to the value UNSET of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_UNSET E_ORanScRicGnbStatusV1_ConnectionStatusType = 0
	// ORanScRicGnbStatusV1_ConnectionStatusType_not_specified corresponds to the value not_specified of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_not_specified E_ORanScRicGnbStatusV1_ConnectionStatusType = 1
	// ORanScRicGnbStatusV1_ConnectionStatusType_connected corresponds to the value connected of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_connected E_ORanScRicGnbStatusV1_ConnectionStatusType = 2
	// ORanScRicGnbStatusV1_ConnectionStatusType_connecting corresponds to the value connecting of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_connecting E_ORanScRicGnbStatusV1_ConnectionStatusType = 3
	// ORanScRicGnbStatusV1_ConnectionStatusType_disconnected corresponds to the value disconnected of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_disconnected E_ORanScRicGnbStatusV1_ConnectionStatusType = 4
	// ORanScRicGnbStatusV1_ConnectionStatusType_setup_failed corresponds to the value setup_failed of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_setup_failed E_ORanScRicGnbStatusV1_ConnectionStatusType = 5
	// ORanScRicGnbStatusV1_ConnectionStatusType_shutting_down corresponds to the value shutting_down of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_shutting_down E_ORanScRicGnbStatusV1_ConnectionStatusType = 6
	// ORanScRicGnbStatusV1_ConnectionStatusType_shutdown corresponds to the value shutdown of ORanScRicGnbStatusV1_ConnectionStatusType
	ORanScRicGnbStatusV1_ConnectionStatusType_shutdown E_ORanScRicGnbStatusV1_ConnectionStatusType = 7
)


// E_ORanScRicGnbStatusV1_E2ApProtocolType is a derived int64 type which is used to represent
// the enumerated node ORanScRicGnbStatusV1_E2ApProtocolType. An additional value named
// ORanScRicGnbStatusV1_E2ApProtocolType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScRicGnbStatusV1_E2ApProtocolType int64

// IsYANGGoEnum ensures that ORanScRicGnbStatusV1_E2ApProtocolType implements the yang.GoEnum
// interface. This ensures that ORanScRicGnbStatusV1_E2ApProtocolType can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScRicGnbStatusV1_E2ApProtocolType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScRicGnbStatusV1_E2ApProtocolType.
func (E_ORanScRicGnbStatusV1_E2ApProtocolType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScRicGnbStatusV1_E2ApProtocolType.
func (e E_ORanScRicGnbStatusV1_E2ApProtocolType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScRicGnbStatusV1_E2ApProtocolType")
}

const (
	// ORanScRicGnbStatusV1_E2ApProtocolType_UNSET corresponds to the value UNSET of ORanScRicGnbStatusV1_E2ApProtocolType
	ORanScRicGnbStatusV1_E2ApProtocolType_UNSET E_ORanScRicGnbStatusV1_E2ApProtocolType = 0
	// ORanScRicGnbStatusV1_E2ApProtocolType_not_specified corresponds to the value not_specified of ORanScRicGnbStatusV1_E2ApProtocolType
	ORanScRicGnbStatusV1_E2ApProtocolType_not_specified E_ORanScRicGnbStatusV1_E2ApProtocolType = 1
	// ORanScRicGnbStatusV1_E2ApProtocolType_x2_setup_request corresponds to the value x2_setup_request of ORanScRicGnbStatusV1_E2ApProtocolType
	ORanScRicGnbStatusV1_E2ApProtocolType_x2_setup_request E_ORanScRicGnbStatusV1_E2ApProtocolType = 2
	// ORanScRicGnbStatusV1_E2ApProtocolType_endc_x2_setup_request corresponds to the value endc_x2_setup_request of ORanScRicGnbStatusV1_E2ApProtocolType
	ORanScRicGnbStatusV1_E2ApProtocolType_endc_x2_setup_request E_ORanScRicGnbStatusV1_E2ApProtocolType = 3
)


// E_ORanScTypesV1_AdministrativeControl is a derived int64 type which is used to represent
// the enumerated node ORanScTypesV1_AdministrativeControl. An additional value named
// ORanScTypesV1_AdministrativeControl_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScTypesV1_AdministrativeControl int64

// IsYANGGoEnum ensures that ORanScTypesV1_AdministrativeControl implements the yang.GoEnum
// interface. This ensures that ORanScTypesV1_AdministrativeControl can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScTypesV1_AdministrativeControl) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScTypesV1_AdministrativeControl.
func (E_ORanScTypesV1_AdministrativeControl) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScTypesV1_AdministrativeControl.
func (e E_ORanScTypesV1_AdministrativeControl) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScTypesV1_AdministrativeControl")
}

const (
	// ORanScTypesV1_AdministrativeControl_UNSET corresponds to the value UNSET of ORanScTypesV1_AdministrativeControl
	ORanScTypesV1_AdministrativeControl_UNSET E_ORanScTypesV1_AdministrativeControl = 0
	// ORanScTypesV1_AdministrativeControl_administrative_control_lock_active corresponds to the value administrative_control_lock_active of ORanScTypesV1_AdministrativeControl
	ORanScTypesV1_AdministrativeControl_administrative_control_lock_active E_ORanScTypesV1_AdministrativeControl = 1
	// ORanScTypesV1_AdministrativeControl_administrative_control_lock_immediate corresponds to the value administrative_control_lock_immediate of ORanScTypesV1_AdministrativeControl
	ORanScTypesV1_AdministrativeControl_administrative_control_lock_immediate E_ORanScTypesV1_AdministrativeControl = 2
	// ORanScTypesV1_AdministrativeControl_administrative_control_lock_passive corresponds to the value administrative_control_lock_passive of ORanScTypesV1_AdministrativeControl
	ORanScTypesV1_AdministrativeControl_administrative_control_lock_passive E_ORanScTypesV1_AdministrativeControl = 3
	// ORanScTypesV1_AdministrativeControl_administrative_control_quiescent corresponds to the value administrative_control_quiescent of ORanScTypesV1_AdministrativeControl
	ORanScTypesV1_AdministrativeControl_administrative_control_quiescent E_ORanScTypesV1_AdministrativeControl = 4
	// ORanScTypesV1_AdministrativeControl_administrative_control_unlock corresponds to the value administrative_control_unlock of ORanScTypesV1_AdministrativeControl
	ORanScTypesV1_AdministrativeControl_administrative_control_unlock E_ORanScTypesV1_AdministrativeControl = 5
)


// E_ORanScTypesV1_AdministrativeState is a derived int64 type which is used to represent
// the enumerated node ORanScTypesV1_AdministrativeState. An additional value named
// ORanScTypesV1_AdministrativeState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScTypesV1_AdministrativeState int64

// IsYANGGoEnum ensures that ORanScTypesV1_AdministrativeState implements the yang.GoEnum
// interface. This ensures that ORanScTypesV1_AdministrativeState can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScTypesV1_AdministrativeState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScTypesV1_AdministrativeState.
func (E_ORanScTypesV1_AdministrativeState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScTypesV1_AdministrativeState.
func (e E_ORanScTypesV1_AdministrativeState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScTypesV1_AdministrativeState")
}

const (
	// ORanScTypesV1_AdministrativeState_UNSET corresponds to the value UNSET of ORanScTypesV1_AdministrativeState
	ORanScTypesV1_AdministrativeState_UNSET E_ORanScTypesV1_AdministrativeState = 0
	// ORanScTypesV1_AdministrativeState_administrative_state_locked corresponds to the value administrative_state_locked of ORanScTypesV1_AdministrativeState
	ORanScTypesV1_AdministrativeState_administrative_state_locked E_ORanScTypesV1_AdministrativeState = 1
	// ORanScTypesV1_AdministrativeState_administrative_state_shutting_down corresponds to the value administrative_state_shutting_down of ORanScTypesV1_AdministrativeState
	ORanScTypesV1_AdministrativeState_administrative_state_shutting_down E_ORanScTypesV1_AdministrativeState = 2
	// ORanScTypesV1_AdministrativeState_administrative_state_unlocked corresponds to the value administrative_state_unlocked of ORanScTypesV1_AdministrativeState
	ORanScTypesV1_AdministrativeState_administrative_state_unlocked E_ORanScTypesV1_AdministrativeState = 3
)


// E_ORanScTypesV1_ControlElementType is a derived int64 type which is used to represent
// the enumerated node ORanScTypesV1_ControlElementType. An additional value named
// ORanScTypesV1_ControlElementType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScTypesV1_ControlElementType int64

// IsYANGGoEnum ensures that ORanScTypesV1_ControlElementType implements the yang.GoEnum
// interface. This ensures that ORanScTypesV1_ControlElementType can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScTypesV1_ControlElementType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScTypesV1_ControlElementType.
func (E_ORanScTypesV1_ControlElementType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScTypesV1_ControlElementType.
func (e E_ORanScTypesV1_ControlElementType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScTypesV1_ControlElementType")
}

const (
	// ORanScTypesV1_ControlElementType_UNSET corresponds to the value UNSET of ORanScTypesV1_ControlElementType
	ORanScTypesV1_ControlElementType_UNSET E_ORanScTypesV1_ControlElementType = 0
	// ORanScTypesV1_ControlElementType_e_node_b corresponds to the value e_node_b of ORanScTypesV1_ControlElementType
	ORanScTypesV1_ControlElementType_e_node_b E_ORanScTypesV1_ControlElementType = 1
	// ORanScTypesV1_ControlElementType_g_node_b corresponds to the value g_node_b of ORanScTypesV1_ControlElementType
	ORanScTypesV1_ControlElementType_g_node_b E_ORanScTypesV1_ControlElementType = 2
)


// E_ORanScTypesV1_ControlFunctionType is a derived int64 type which is used to represent
// the enumerated node ORanScTypesV1_ControlFunctionType. An additional value named
// ORanScTypesV1_ControlFunctionType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScTypesV1_ControlFunctionType int64

// IsYANGGoEnum ensures that ORanScTypesV1_ControlFunctionType implements the yang.GoEnum
// interface. This ensures that ORanScTypesV1_ControlFunctionType can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScTypesV1_ControlFunctionType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScTypesV1_ControlFunctionType.
func (E_ORanScTypesV1_ControlFunctionType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScTypesV1_ControlFunctionType.
func (e E_ORanScTypesV1_ControlFunctionType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScTypesV1_ControlFunctionType")
}

const (
	// ORanScTypesV1_ControlFunctionType_UNSET corresponds to the value UNSET of ORanScTypesV1_ControlFunctionType
	ORanScTypesV1_ControlFunctionType_UNSET E_ORanScTypesV1_ControlFunctionType = 0
	// ORanScTypesV1_ControlFunctionType_near_realtime_ran_intelligent_controller corresponds to the value near_realtime_ran_intelligent_controller of ORanScTypesV1_ControlFunctionType
	ORanScTypesV1_ControlFunctionType_near_realtime_ran_intelligent_controller E_ORanScTypesV1_ControlFunctionType = 1
)


// E_ORanScTypesV1_LifecycleState is a derived int64 type which is used to represent
// the enumerated node ORanScTypesV1_LifecycleState. An additional value named
// ORanScTypesV1_LifecycleState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScTypesV1_LifecycleState int64

// IsYANGGoEnum ensures that ORanScTypesV1_LifecycleState implements the yang.GoEnum
// interface. This ensures that ORanScTypesV1_LifecycleState can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScTypesV1_LifecycleState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScTypesV1_LifecycleState.
func (E_ORanScTypesV1_LifecycleState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScTypesV1_LifecycleState.
func (e E_ORanScTypesV1_LifecycleState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScTypesV1_LifecycleState")
}

const (
	// ORanScTypesV1_LifecycleState_UNSET corresponds to the value UNSET of ORanScTypesV1_LifecycleState
	ORanScTypesV1_LifecycleState_UNSET E_ORanScTypesV1_LifecycleState = 0
	// ORanScTypesV1_LifecycleState_lifecycle_state_installed corresponds to the value lifecycle_state_installed of ORanScTypesV1_LifecycleState
	ORanScTypesV1_LifecycleState_lifecycle_state_installed E_ORanScTypesV1_LifecycleState = 1
	// ORanScTypesV1_LifecycleState_lifecycle_state_pending_removal corresponds to the value lifecycle_state_pending_removal of ORanScTypesV1_LifecycleState
	ORanScTypesV1_LifecycleState_lifecycle_state_pending_removal E_ORanScTypesV1_LifecycleState = 2
	// ORanScTypesV1_LifecycleState_lifecycle_state_planned corresponds to the value lifecycle_state_planned of ORanScTypesV1_LifecycleState
	ORanScTypesV1_LifecycleState_lifecycle_state_planned E_ORanScTypesV1_LifecycleState = 3
	// ORanScTypesV1_LifecycleState_lifecycle_state_potential_available corresponds to the value lifecycle_state_potential_available of ORanScTypesV1_LifecycleState
	ORanScTypesV1_LifecycleState_lifecycle_state_potential_available E_ORanScTypesV1_LifecycleState = 4
	// ORanScTypesV1_LifecycleState_lifecycle_state_potential_busy corresponds to the value lifecycle_state_potential_busy of ORanScTypesV1_LifecycleState
	ORanScTypesV1_LifecycleState_lifecycle_state_potential_busy E_ORanScTypesV1_LifecycleState = 5
)


// E_ORanScTypesV1_OperationalState is a derived int64 type which is used to represent
// the enumerated node ORanScTypesV1_OperationalState. An additional value named
// ORanScTypesV1_OperationalState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ORanScTypesV1_OperationalState int64

// IsYANGGoEnum ensures that ORanScTypesV1_OperationalState implements the yang.GoEnum
// interface. This ensures that ORanScTypesV1_OperationalState can be identified as a
// mapped type for a YANG enumeration.
func (E_ORanScTypesV1_OperationalState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ORanScTypesV1_OperationalState.
func (E_ORanScTypesV1_OperationalState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_ORanScTypesV1_OperationalState.
func (e E_ORanScTypesV1_OperationalState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ORanScTypesV1_OperationalState")
}

const (
	// ORanScTypesV1_OperationalState_UNSET corresponds to the value UNSET of ORanScTypesV1_OperationalState
	ORanScTypesV1_OperationalState_UNSET E_ORanScTypesV1_OperationalState = 0
	// ORanScTypesV1_OperationalState_operational_state_disabled corresponds to the value operational_state_disabled of ORanScTypesV1_OperationalState
	ORanScTypesV1_OperationalState_operational_state_disabled E_ORanScTypesV1_OperationalState = 1
	// ORanScTypesV1_OperationalState_operational_state_enabled corresponds to the value operational_state_enabled of ORanScTypesV1_OperationalState
	ORanScTypesV1_OperationalState_operational_state_enabled E_ORanScTypesV1_OperationalState = 2
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
	},
	"E_IETFInterfaces_InterfacesState_Interface_AdminStatus": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "testing"},
	},
	"E_IETFInterfaces_InterfacesState_Interface_OperStatus": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "testing"},
		5: {Name: "unknown"},
		6: {Name: "dormant"},
		7: {Name: "not-present"},
		8: {Name: "lower-layer-down"},
	},
	"E_IETFInterfaces_Interfaces_Interface_AdminStatus": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "testing"},
	},
	"E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable": {
		2: {Name: "enabled"},
		3: {Name: "disabled"},
	},
	"E_IETFInterfaces_Interfaces_Interface_OperStatus": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "testing"},
		5: {Name: "unknown"},
		6: {Name: "dormant"},
		7: {Name: "not-present"},
		8: {Name: "lower-layer-down"},
	},
	"E_ORanScRicGnbStatusV1_ConnectionStatusType": {
		1: {Name: "not-specified"},
		2: {Name: "connected"},
		3: {Name: "connecting"},
		4: {Name: "disconnected"},
		5: {Name: "setup-failed"},
		6: {Name: "shutting-down"},
		7: {Name: "shutdown"},
	},
	"E_ORanScRicGnbStatusV1_E2ApProtocolType": {
		1: {Name: "not-specified"},
		2: {Name: "x2-setup-request"},
		3: {Name: "endc-x2-setup-request"},
	},
	"E_ORanScTypesV1_AdministrativeControl": {
		1: {Name: "administrative-control-lock-active", DefiningModule: "o-ran-sc-types-v1"},
		2: {Name: "administrative-control-lock-immediate", DefiningModule: "o-ran-sc-types-v1"},
		3: {Name: "administrative-control-lock-passive", DefiningModule: "o-ran-sc-types-v1"},
		4: {Name: "administrative-control-quiescent", DefiningModule: "o-ran-sc-types-v1"},
		5: {Name: "administrative-control-unlock", DefiningModule: "o-ran-sc-types-v1"},
	},
	"E_ORanScTypesV1_AdministrativeState": {
		1: {Name: "administrative-state-locked", DefiningModule: "o-ran-sc-types-v1"},
		2: {Name: "administrative-state-shutting-down", DefiningModule: "o-ran-sc-types-v1"},
		3: {Name: "administrative-state-unlocked", DefiningModule: "o-ran-sc-types-v1"},
	},
	"E_ORanScTypesV1_ControlElementType": {
		1: {Name: "e-node-b", DefiningModule: "o-ran-sc-types-v1"},
		2: {Name: "g-node-b", DefiningModule: "o-ran-sc-types-v1"},
	},
	"E_ORanScTypesV1_ControlFunctionType": {
		1: {Name: "near-realtime-ran-intelligent-controller", DefiningModule: "o-ran-sc-ric-xapp-desc-v1"},
	},
	"E_ORanScTypesV1_LifecycleState": {
		1: {Name: "lifecycle-state-installed", DefiningModule: "o-ran-sc-types-v1"},
		2: {Name: "lifecycle-state-pending-removal", DefiningModule: "o-ran-sc-types-v1"},
		3: {Name: "lifecycle-state-planned", DefiningModule: "o-ran-sc-types-v1"},
		4: {Name: "lifecycle-state-potential-available", DefiningModule: "o-ran-sc-types-v1"},
		5: {Name: "lifecycle-state-potential-busy", DefiningModule: "o-ran-sc-types-v1"},
	},
	"E_ORanScTypesV1_OperationalState": {
		1: {Name: "operational-state-disabled", DefiningModule: "o-ran-sc-types-v1"},
		2: {Name: "operational-state-enabled", DefiningModule: "o-ran-sc-types-v1"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0xeb, 0x6f, 0xdb, 0x48,
		0x92, 0xff, 0xee, 0xbf, 0x42, 0x10, 0xb0, 0x80, 0x3d, 0x13, 0x26, 0xb6, 0xe3, 0x47, 0xe2, 0x2f,
		0x41, 0x66, 0x27, 0xb9, 0x33, 0x76, 0x76, 0x76, 0x91, 0x0c, 0x16, 0x87, 0x8b, 0x75, 0x01, 0x4d,
		0xb6, 0xe4, 0xbe, 0x48, 0x4d, 0x2d, 0xd9, 0x4c, 0xe2, 0xcb, 0xf8, 0x7f, 0x3f, 0x50, 0xd4, 0x5b,
		0x94, 0xd4, 0x55, 0xdd, 0xa4, 0x28, 0xea, 0x97, 0x0f, 0x8e, 0x1e, 0xec, 0x56, 0x3f, 0xaa, 0xea,
		0x57, 0x55, 0xdd, 0x55, 0xf5, 0xe3, 0xa8, 0xd5, 0x6a, 0xb5, 0xda, 0xbf, 0xfb, 0x03, 0xd1, 0xbe,
		0x69, 0xb5, 0x43, 0xf1, 0x55, 0x06, 0xa2, 0xfd, 0x2c, 0xff, 0xf4, 0x6f, 0x52, 0x85, 0xed, 0x9b,
		0xd6, 0xd9, 0xf8, 0xed, 0x5f, 0x23, 0xd5, 0x95, 0xbd, 0xf6, 0x4d, 0xeb, 0x74, 0xfc, 0xc1, 0xaf,
		0x32, 0x6e, 0xdf, 0xb4, 0xf2, 0x2e, 0x46, 0x1f, 0x04, 0x91, 0xd2, 0x71, 0xd4, 0xef, 0x8b, 0xd0,
		0x13, 0x7d, 0x31, 0x10, 0x4a, 0x2f, 0x7c, 0xbf, 0xf0, 0x53, 0x05, 0xcf, 0x3e, 0x5b, 0x7c, 0x72,
		0xf1, 0xe7, 0xa7, 0x1f, 0x2f, 0x0f, 0x63, 0xfa, 0xc5, 0x3f, 0x63, 0xd1, 0x95, 0xdf, 0x57, 0x7e,
		0x71, 0xe1, 0x57, 0xa3, 0x78, 0xe9, 0x57, 0x46, 0xdf, 0x7e, 0x8c, 0xd2, 0x38, 0x10, 0x85, 0x2d,
		0xf3, 0x91, 0x88, 0xc7, 0x6f, 0x51, 0x9c, 0x0d, 0xa6, 0x3d, 0xcc, 0x7f, 0xe4, 0x59, 0xf1, 0x83,
		0xff, 0xe9, 0x27, 0x6f, 0xe3, 0x5e, 0x3a, 0x9e, 0xb9, 0x8e, 0x53, 0xb1, 0xe6, 0xc1, 0xb9, 0xa7,
		0xb2, 0x31, 0xad, 0x3c, 0xf4, 0xb4, 0xf0, 0xc9, 0xd3, 0xd2, 0x4c, 0x97, 0x17, 0x7e, 0xfa, 0x85,
		0x1f, 0x0e, 0xa4, 0x92, 0x89, 0x8e, 0x7d, 0x2d, 0xbf, 0x0a, 0x6f, 0xbc, 0xc6, 0xeb, 0x27, 0x36,
		0x59, 0x96, 0x35, 0xed, 0xd6, 0x0c, 0x7e, 0xbc, 0x31, 0xa7, 0x6b, 0xbe, 0x5e, 0xb7, 0x41, 0x26,
		0x1b, 0x65, 0xb6, 0x61, 0xa6, 0x1b, 0x47, 0xde, 0x40, 0xf2, 0x46, 0x1a, 0x6f, 0x68, 0xf1, 0xc6,
		0xae, 0xd9, 0xe0, 0x69, 0xaf, 0x7f, 0x3c, 0x0e, 0x85, 0xd9, 0x3a, 0xc9, 0x50, 0x28, 0x2d, 0xf5,
		0x63, 0x2c, 0xba, 0x9b, 0x16, 0x6c, 0xc2, 0x53, 0x97, 0x1b, 0x9e, 0xb9, 0x1d, 0x77, 0xf5, 0x8b,
		0x9f, 0x18, 0x2c, 0x2d, 0x8b, 0x84, 0xa6, 0xad, 0xff, 0xe5, 0xf7, 0x53, 0x91, 0xb4, 0x6f, 0x5a,
		0x9f, 0x36, 0x3e, 0x97, 0xfd, 0xfb, 0xb1, 0xf5, 0x09, 0x83, 0xf1, 0x78, 0xfd, 0x28, 0xf8, 0xe2,
		0xf9, 0x41, 0xf6, 0x59, 0x7b, 0x6b, 0x87, 0x4f, 0xcf, 0xaa, 0x1c, 0xd5, 0xd0, 0x4f, 0x92, 0x7a,
		0x0d, 0x2b, 0x55, 0xd9, 0xc0, 0xea, 0xb6, 0x4e, 0x72, 0x30, 0x10, 0xa1, 0xf4, 0x75, 0x9d, 0x56,
		0xea, 0xdf, 0xa9, 0x14, 0x49, 0x90, 0xf1, 0xff, 0xf6, 0x31, 0x6d, 0x7c, 0xa2, 0x43, 0x95, 0x1c,
		0x47, 0x06, 0x73, 0x5e, 0x1e, 0x75, 0xa2, 0xb3, 0xd5, 0xa3, 0xa2, 0x42, 0xde, 0xca, 0x12, 0x13,
		0xce, 0x81, 0x09, 0x07, 0x8b, 0x09, 0x9b, 0x08, 0xa8, 0x7a, 0x44, 0x18, 0x8d, 0xc6, 0x4b, 0x1e,
		0x52, 0xad, 0xa5, 0xea, 0x79, 0x61, 0xf4, 0x4d, 0xd5, 0x40, 0xa0, 0xe4, 0xa3, 0xca, 0x05, 0xaf,
		0x08, 0x6b, 0x33, 0x20, 0xe3, 0xe1, 0xec, 0x40, 0xb8, 0xcd, 0x59, 0x12, 0xdd, 0x54, 0x05, 0x5a,
		0x46, 0x6a, 0xbb, 0x6c, 0x2b, 0x6a, 0xb4, 0x59, 0xb4, 0x9d, 0x41, 0xdd, 0x2d, 0x5b, 0xb4, 0xad,
		0xb3, 0x6b, 0xb8, 0xf6, 0x8d, 0x23, 0x25, 0x75, 0x33, 0xb6, 0x19, 0x13, 0x02, 0x85, 0x20, 0x68,
		0x84, 0x41, 0x25, 0x10, 0x36, 0xa1, 0xb0, 0x09, 0x86, 0x4c, 0x38, 0x66, 0x02, 0x65, 0x8b, 0xf4,
		0xdb, 0x8e, 0x95, 0x4c, 0xcc, 0xa4, 0x60, 0x27, 0x0f, 0x43, 0xdd, 0x90, 0x2e, 0x07, 0x55, 0x69,
		0xb0, 0x51, 0x8a, 0xdd, 0x45, 0x00, 0xb7, 0x12, 0x47, 0x6b, 0x6c, 0x8f, 0xed, 0x7c, 0xb8, 0xa6,
		0x76, 0x5a, 0x3d, 0xd6, 0x95, 0x60, 0xbf, 0xed, 0x7c, 0xc0, 0x04, 0xbb, 0xce, 0x4c, 0x62, 0x6d,
		0x57, 0x85, 0x0c, 0x25, 0xdf, 0x11, 0x63, 0xad, 0x68, 0x76, 0xa0, 0x13, 0x75, 0x9e, 0x8a, 0x9d,
		0xe7, 0xc0, 0x4e, 0x60, 0x67, 0xc9, 0xd8, 0x69, 0x42, 0xb8, 0xbb, 0x47, 0x4e, 0x96, 0x7d, 0xba,
		0x33, 0x81, 0x49, 0xb5, 0x5b, 0x77, 0x3c, 0x50, 0xf2, 0x30, 0x6b, 0x2c, 0xd4, 0x83, 0x89, 0xec,
		0x34, 0x14, 0xe3, 0xe3, 0xe7, 0xcd, 0x04, 0xf7, 0xd9, 0x2e, 0x8d, 0x9e, 0x38, 0x0d, 0x9a, 0x27,
		0xb9, 0xb3, 0x49, 0x95, 0x2c, 0xba, 0xb7, 0xd9, 0xd1, 0xb6, 0xf6, 0xb4, 0x63, 0xe3, 0xc4, 0x4c,
		0x47, 0x20, 0x93, 0x1c, 0x87, 0xf4, 0x78, 0xba, 0x03, 0x97, 0x12, 0xad, 0x29, 0xd2, 0x9a, 0x32,
		0xd9, 0xba, 0x05, 0x4d, 0x30, 0x1a, 0x4a, 0x79, 0x73, 0x9d, 0xc3, 0x52, 0xf7, 0xe0, 0xe8, 0x20,
		0x76, 0xba, 0x88, 0x5b, 0x96, 0xb1, 0xd1, 0x4e, 0x78, 0x70, 0x5a, 0xaa, 0x9d, 0xcf, 0x50, 0x06,
		0x2a, 0x98, 0x05, 0xd9, 0xfe, 0xaf, 0xdd, 0x34, 0xa8, 0x7e, 0x81, 0x7a, 0xee, 0x03, 0xc3, 0x5f,
		0x50, 0xbb, 0x89, 0x30, 0xfc, 0x08, 0x34, 0x09, 0x6b, 0xae, 0x82, 0x12, 0x25, 0xb7, 0x8b, 0x13,
		0x28, 0x9e, 0xdf, 0xc1, 0xa9, 0x19, 0xc7, 0xd5, 0x31, 0xce, 0xa1, 0x63, 0x40, 0xc7, 0x68, 0x88,
		0x8e, 0x41, 0x61, 0x98, 0xfa, 0x69, 0x18, 0x56, 0xfe, 0x90, 0xda, 0x00, 0x02, 0xd7, 0x4f, 0x52,
		0xb3, 0x09, 0xb0, 0x87, 0xdf, 0x00, 0x30, 0x63, 0x5b, 0xc9, 0x3c, 0xb3, 0xf8, 0xac, 0x8e, 0x66,
		0xb1, 0x99, 0x67, 0xa6, 0x61, 0x98, 0x65, 0xe4, 0xb9, 0x29, 0x07, 0xb4, 0x4c, 0x3d, 0x3a, 0x33,
		0x8d, 0x2b, 0x37, 0xc1, 0xf8, 0xd0, 0x91, 0xb7, 0x27, 0xae, 0x16, 0x4d, 0xcb, 0x62, 0x93, 0xae,
		0x0d, 0x09, 0x5b, 0x92, 0xb2, 0x2d, 0x49, 0x3b, 0x23, 0x6d, 0x67, 0x24, 0x6e, 0x4f, 0xea, 0x3c,
		0xe1, 0x4e, 0x44, 0x32, 0xba, 0xde, 0xb6, 0xb2, 0xd3, 0xf7, 0x51, 0xd4, 0x17, 0xbe, 0xe2, 0xec,
		0xf6, 0x44, 0x16, 0x9f, 0x1d, 0x95, 0xb3, 0x20, 0x84, 0xc5, 0x68, 0x4b, 0xa5, 0x45, 0xdc, 0xf5,
		0x03, 0x71, 0x1b, 0xf2, 0xf9, 0x7b, 0xbe, 0x13, 0x1e, 0x93, 0x9f, 0x81, 0xc9, 0xc1, 0xe4, 0xae,
		0x99, 0x9c, 0x8a, 0x73, 0xd3, 0x86, 0xbd, 0x7e, 0x74, 0xef, 0xf7, 0xdf, 0xfd, 0xfe, 0x0b, 0x83,
		0x29, 0x56, 0xa8, 0x65, 0xbe, 0x33, 0xe6, 0x3a, 0xf3, 0x98, 0xc4, 0x9a, 0x59, 0x5c, 0x30, 0x8d,
		0x23, 0xe6, 0x71, 0xc5, 0x44, 0xce, 0x99, 0xc9, 0x39, 0x53, 0xb9, 0x63, 0x2e, 0x1e, 0x93, 0x59,
		0xd8, 0x86, 0x56, 0x4c, 0x37, 0xed, 0x40, 0x58, 0xb1, 0xdd, 0x0a, 0xbd, 0x09, 0x0b, 0xc6, 0xb3,
		0x54, 0x45, 0x9d, 0x33, 0xa2, 0x4b, 0x86, 0x74, 0xcc, 0x98, 0xae, 0x19, 0xb4, 0x34, 0x46, 0x2d,
		0x8d, 0x61, 0xdd, 0x33, 0xae, 0x1d, 0x03, 0x5b, 0x32, 0xb2, 0xbd, 0xaa, 0xbc, 0x96, 0xd2, 0x52,
		0xa9, 0xf4, 0xd5, 0x85, 0x0b, 0x62, 0x1b, 0xf3, 0xe5, 0x2b, 0x07, 0x5d, 0x7d, 0xf0, 0x55, 0x4f,
		0xb0, 0x3c, 0x93, 0xee, 0xdc, 0x64, 0x85, 0x03, 0xfb, 0xbb, 0x54, 0xce, 0xb8, 0xc9, 0xb1, 0x40,
		0x5b, 0xe9, 0x76, 0xe4, 0xdf, 0x2d, 0xa1, 0xdf, 0xf7, 0xb1, 0x3f, 0x8a, 0xaa, 0xf9, 0x55, 0xf6,
		0xa4, 0x4e, 0xb2, 0x1f, 0x70, 0xd6, 0xff, 0xd3, 0x33, 0x87, 0x5b, 0xe5, 0x7f, 0xdf, 0xbb, 0xad,
		0x3a, 0x7b, 0x75, 0x71, 0x71, 0x75, 0x7d, 0x71, 0x71, 0x7a, 0xfd, 0xf2, 0xfa, 0xf4, 0xf5, 0xe5,
		0xe5, 0xd9, 0x15, 0xe5, 0x6c, 0x61, 0xe7, 0xbb, 0x77, 0x54, 0x8f, 0x5e, 0x3a, 0x47, 0xbb, 0xf9,
		0x7d, 0x0b, 0xea, 0x6d, 0x0f, 0xfb, 0x03, 0xe5, 0x52, 0xd3, 0x1a, 0xf7, 0x07, 0x55, 0x0b, 0xaa,
		0x16, 0x54, 0xad, 0x9a, 0xa8, 0x5a, 0x89, 0xfc, 0x3f, 0x11, 0x7a, 0xc3, 0x58, 0x2a, 0xed, 0xdf,
		0xf7, 0x85, 0x97, 0xe8, 0x58, 0xaa, 0x9e, 0x43, 0xd5, 0xeb, 0xcc, 0x85, 0xee, 0xf5, 0x9b, 0x50,
		0x3d, 0xfd, 0x00, 0xe5, 0xcb, 0x11, 0xa2, 0x43, 0xf9, 0xda, 0x97, 0xad, 0xba, 0x7a, 0x09, 0x55,
		0x8b, 0xac, 0x6a, 0x39, 0x10, 0x38, 0xff, 0xf4, 0xb5, 0x16, 0xb1, 0x72, 0x26, 0x71, 0xda, 0x9f,
		0xee, 0xee, 0xee, 0xee, 0xbe, 0x9f, 0x9f, 0x7a, 0xa3, 0xff, 0xaf, 0xdf, 0x75, 0xda, 0xfb, 0xab,
		0x52, 0x56, 0xea, 0x2e, 0x7c, 0xab, 0x54, 0xa4, 0xfd, 0x8d, 0x69, 0x16, 0x8c, 0xfa, 0x49, 0x82,
		0x07, 0x31, 0xf0, 0x87, 0xfe, 0x08, 0x46, 0xda, 0x2f, 0x22, 0x2f, 0xf6, 0x95, 0x97, 0x04, 0x5e,
		0x1c, 0x45, 0xda, 0xfb, 0x7a, 0xf6, 0x62, 0x35, 0x43, 0xdc, 0x8b, 0x82, 0xac, 0x0d, 0x2f, 0xf2,
		0x70, 0x96, 0xc9, 0x57, 0x2f, 0xe6, 0x0e, 0xb6, 0x5e, 0xd8, 0xfb, 0xf1, 0xf3, 0x81, 0xea, 0x38,
		0x0d, 0xb4, 0x1a, 0xe3, 0xf3, 0x3f, 0x3e, 0xf8, 0xea, 0x63, 0xf0, 0x21, 0x8a, 0xf4, 0xbf, 0xce,
		0x3e, 0xff, 0x75, 0x3a, 0xa0, 0x77, 0xf9, 0x10, 0xe7, 0x3e, 0x79, 0x3f, 0x1e, 0xe1, 0xe7, 0x5c,
		0xb1, 0x9d, 0x7c, 0xf3, 0xf9, 0x76, 0x36, 0xc2, 0xcf, 0xff, 0x31, 0x37, 0xc2, 0xa3, 0x6a, 0xb6,
		0xbe, 0xdc, 0x03, 0x1c, 0x4b, 0xe2, 0x28, 0x9f, 0x28, 0x38, 0xc7, 0x80, 0xe5, 0x11, 0x40, 0xbb,
		0xac, 0xf3, 0x64, 0xa7, 0xb7, 0x4f, 0x98, 0x9b, 0x5a, 0xce, 0x66, 0x52, 0xee, 0x1d, 0xb9, 0xdd,
		0xb8, 0x76, 0xf5, 0x97, 0xcc, 0xb2, 0x75, 0xc8, 0xaf, 0x9d, 0x76, 0xa5, 0x88, 0xd9, 0x57, 0xce,
		0x96, 0xba, 0x69, 0xc0, 0x05, 0x34, 0xdc, 0x99, 0xae, 0x52, 0x00, 0xd0, 0xaf, 0x9f, 0xa5, 0xfa,
		0x21, 0x8a, 0xa5, 0x7e, 0xf4, 0x62, 0xd1, 0xb5, 0xb8, 0x85, 0xb6, 0xd0, 0xcd, 0x01, 0x5c, 0x46,
		0x23, 0x91, 0xb5, 0x2b, 0xaf, 0x52, 0xcd, 0xaf, 0xa9, 0x50, 0xc8, 0xbe, 0x1a, 0x25, 0xc7, 0xfe,
		0x2a, 0x9a, 0x33, 0x27, 0x8f, 0x8d, 0x53, 0xc7, 0xd6, 0x89, 0x63, 0xa1, 0xfb, 0xbb, 0x70, 0xd2,
		0xb8, 0xf2, 0x3b, 0x3b, 0x72, 0xc2, 0xb8, 0x34, 0xe4, 0x6d, 0xce, 0x08, 0x5c, 0x38, 0x55, 0x5c,
		0x2f, 0xad, 0xad, 0xd3, 0xc4, 0xe9, 0xda, 0x56, 0x64, 0x67, 0x31, 0x9c, 0x1e, 0xd6, 0x4e, 0x0e,
		0x17, 0x4e, 0x8d, 0x4e, 0x1d, 0xae, 0xb8, 0xe6, 0xba, 0xaa, 0x88, 0x2d, 0x2e, 0xb8, 0x4e, 0xbb,
		0x80, 0xda, 0x00, 0xb5, 0xa1, 0x29, 0x6a, 0x03, 0xd4, 0x04, 0xa8, 0x09, 0xcd, 0x55, 0x13, 0xce,
		0x2f, 0x2f, 0x0f, 0x50, 0x4f, 0xd8, 0x0b, 0x17, 0xe0, 0xdf, 0xc4, 0x23, 0xd7, 0x20, 0x6f, 0xff,
		0x26, 0x13, 0xfd, 0x56, 0x6b, 0xa2, 0x0b, 0xe1, 0xef, 0x52, 0x8d, 0x3d, 0x73, 0x09, 0x8d, 0xc4,
		0x32, 0xd2, 0x9e, 0x6b, 0x69, 0x77, 0x5b, 0xaa, 0xfd, 0x8f, 0x38, 0x14, 0xb1, 0x08, 0x7f, 0xc9,
		0xa6, 0xaf, 0xd2, 0x7e, 0xbf, 0xb9, 0x8e, 0x55, 0x96, 0x93, 0xb0, 0x04, 0x37, 0x6b, 0x5f, 0x84,
		0xb7, 0xb3, 0x61, 0x54, 0xe8, 0x73, 0xb5, 0x71, 0xb4, 0xb2, 0xbd, 0xab, 0xc8, 0x7a, 0x85, 0x8c,
		0x14, 0xec, 0x8c, 0x14, 0x69, 0x2a, 0x43, 0x4e, 0x2a, 0x0a, 0x82, 0x16, 0xc8, 0xb6, 0x49, 0xdb,
		0x9f, 0x4e, 0xbd, 0xd7, 0xbe, 0xd7, 0x7d, 0xeb, 0xbd, 0xef, 0xfc, 0x78, 0xf5, 0xe4, 0xcd, 0xbf,
		0xbd, 0xa0, 0xbc, 0x3d, 0x3b, 0x7f, 0x32, 0xdf, 0x99, 0x4e, 0x85, 0xf2, 0xa2, 0xef, 0xdf, 0x0b,
		0x46, 0x1a, 0x80, 0xbc, 0x19, 0xa4, 0x04, 0xa4, 0x44, 0x45, 0x52, 0x82, 0x6c, 0x35, 0xb2, 0xe4,
		0x04, 0xd3, 0x4a, 0x64, 0x58, 0xc3, 0x36, 0x56, 0xa1, 0xa5, 0xc9, 0x62, 0x6b, 0x05, 0xba, 0x30,
		0x50, 0x18, 0x56, 0x9f, 0x95, 0xb5, 0xe7, 0x6a, 0xc9, 0xae, 0x2e, 0x76, 0xb8, 0x66, 0x25, 0x19,
		0x59, 0x95, 0xc2, 0x8d, 0xec, 0x8a, 0xe0, 0x31, 0xe8, 0xb3, 0xf3, 0xa7, 0x2d, 0x77, 0x00, 0x08,
		0x02, 0x04, 0x55, 0x04, 0x41, 0x7b, 0x97, 0x3a, 0x8d, 0xc7, 0x2b, 0x8b, 0x32, 0x6f, 0x27, 0x59,
		0xd3, 0x96, 0x06, 0xee, 0x0d, 0x23, 0x9d, 0xad, 0x87, 0xdf, 0xf7, 0xee, 0xd3, 0xe4, 0x71, 0x1f,
		0x12, 0x8e, 0xad, 0xcc, 0xa0, 0xef, 0x2b, 0xb5, 0x1f, 0xb9, 0xd2, 0xd6, 0x2f, 0xbe, 0xff, 0xd5,
		0x97, 0x7d, 0xff, 0xbe, 0x2f, 0xf6, 0x72, 0x1a, 0x42, 0x85, 0x52, 0xf5, 0xbc, 0x58, 0x0c, 0xa2,
		0xaf, 0x7e, 0x7f, 0x1f, 0xa7, 0x20, 0x55, 0xa2, 0xfd, 0x7e, 0xff, 0x50, 0x73, 0xd6, 0x8d, 0x7d,
		0x73, 0x44, 0x85, 0x61, 0xd4, 0x0a, 0x5a, 0x02, 0xb4, 0x84, 0xaa, 0x0c, 0x55, 0xdb, 0x5b, 0x51,
		0x30, 0x5c, 0x61, 0xb8, 0x96, 0x60, 0xb8, 0xbe, 0x6c, 0xa0, 0xe1, 0x5a, 0x89, 0x07, 0x98, 0x7f,
		0x1b, 0xa9, 0x53, 0x31, 0x38, 0x26, 0x43, 0x3f, 0x60, 0x22, 0x64, 0xde, 0xb4, 0x01, 0x30, 0x89,
		0xa4, 0xae, 0x07, 0xe0, 0xd1, 0xad, 0x90, 0xaf, 0xa2, 0xa1, 0x88, 0x47, 0x87, 0xdb, 0x7e, 0x9f,
		0xeb, 0xb2, 0x5a, 0xed, 0x02, 0xf9, 0xfe, 0xa1, 0x8e, 0xc2, 0x69, 0xe5, 0x96, 0x5b, 0x6a, 0xe0,
		0xb6, 0x5a, 0x19, 0xba, 0x27, 0x54, 0x66, 0x03, 0xec, 0x85, 0xdb, 0x67, 0x75, 0xf0, 0xa1, 0x4c,
		0xb8, 0xa3, 0xaf, 0xbb, 0xb7, 0xc1, 0xaa, 0x32, 0x1d, 0xf1, 0xc2, 0x93, 0xdb, 0x8b, 0x4e, 0x26,
		0xb5, 0x04, 0xdd, 0x5c, 0x65, 0x6a, 0x97, 0x53, 0xe6, 0x91, 0x11, 0x11, 0x6a, 0x15, 0x09, 0x5a,
		0x8b, 0x22, 0x90, 0xa8, 0xde, 0xcb, 0x61, 0x34, 0xf3, 0x12, 0x90, 0xac, 0x48, 0x4d, 0xab, 0x08,
		0x4d, 0xf8, 0x0a, 0xa1, 0x9c, 0xc1, 0x57, 0x08, 0x5f, 0x21, 0x7c, 0x85, 0xf0, 0x15, 0xee, 0x9b,
		0xaf, 0x90, 0x1e, 0x99, 0xc8, 0x8e, 0x48, 0x04, 0x4c, 0x02, 0x26, 0x77, 0xe9, 0x29, 0x04, 0x2c,
		0x02, 0x16, 0x5d, 0x2d, 0x19, 0x3b, 0xb2, 0xef, 0x20, 0x2e, 0x7f, 0x5a, 0x59, 0x7a, 0x8c, 0xc8,
		0x3c, 0x5a, 0x44, 0x1e, 0x3d, 0x12, 0xcf, 0x49, 0x04, 0x1e, 0x2d, 0xf2, 0xae, 0xbe, 0x8e, 0x27,
		0x56, 0x68, 0x9d, 0x0b, 0x3f, 0x14, 0x31, 0x96, 0x8e, 0xe7, 0x95, 0x9a, 0xcc, 0xd4, 0xd3, 0x26,
		0x10, 0x35, 0x85, 0xa5, 0xc5, 0x66, 0x66, 0x5e, 0xa8, 0x53, 0x78, 0xa1, 0xf6, 0xcd, 0x0b, 0x65,
		0xac, 0xb7, 0x30, 0xcf, 0x5c, 0x28, 0x67, 0x2d, 0xbc, 0x33, 0x96, 0x65, 0xff, 0xa9, 0x47, 0xa1,
		0xdc, 0x45, 0x18, 0xa4, 0x9d, 0xab, 0x30, 0x8f, 0x80, 0x94, 0xf0, 0x63, 0x2f, 0x16, 0x7e, 0x5f,
		0xcb, 0x81, 0x18, 0x09, 0x2d, 0xa9, 0xb4, 0xe8, 0xf7, 0x65, 0x4f, 0x28, 0xed, 0x4d, 0xc5, 0x91,
		0x73, 0x4d, 0xb6, 0x63, 0x4b, 0x49, 0x2c, 0xe9, 0xc3, 0x71, 0x84, 0x93, 0xbd, 0xdf, 0x90, 0x3b,
		0x07, 0x20, 0x77, 0x0c, 0x23, 0x69, 0x29, 0xd6, 0x11, 0xd9, 0x17, 0x52, 0x6d, 0xc4, 0x6c, 0xa7,
		0x0c, 0x7e, 0x9c, 0x64, 0xb6, 0xcd, 0x94, 0x50, 0x11, 0x0b, 0x15, 0x10, 0x74, 0x82, 0xa2, 0xc6,
		0x8e, 0x39, 0xf4, 0xbc, 0x0c, 0x0e, 0x95, 0xdd, 0x06, 0xb2, 0xa8, 0xec, 0xd6, 0x50, 0x37, 0x98,
		0x27, 0x10, 0x0a, 0xb3, 0x5e, 0x9b, 0x31, 0x6b, 0xae, 0xea, 0xcb, 0xee, 0xcd, 0xf4, 0x87, 0x92,
		0x85, 0x77, 0xd9, 0x9b, 0x91, 0x46, 0x6e, 0x35, 0xef, 0x06, 0xda, 0x5e, 0x2c, 0x59, 0x61, 0x16,
		0x3d, 0x4f, 0x8a, 0x9a, 0x07, 0x62, 0x1f, 0x10, 0x62, 0x1b, 0x7b, 0x36, 0x49, 0x98, 0x4d, 0xf4,
		0x64, 0xd2, 0xf2, 0x19, 0x31, 0x1c, 0xe0, 0xbc, 0x64, 0x84, 0x4c, 0x4f, 0xa5, 0x8d, 0xb3, 0xed,
		0x89, 0x96, 0xa0, 0xa9, 0xf2, 0xa5, 0xa0, 0x46, 0x9f, 0x5b, 0xad, 0x85, 0x23, 0xc7, 0x60, 0x19,
		0x2a, 0x1a, 0x35, 0x8a, 0x9c, 0x19, 0x11, 0x0b, 0x51, 0x0c, 0xa7, 0xcd, 0xee, 0x9d, 0x36, 0xcc,
		0x8c, 0x07, 0xd5, 0xb9, 0x6b, 0x5c, 0x45, 0x6b, 0x13, 0xa4, 0xaf, 0xab, 0x91, 0x52, 0xa3, 0xb2,
		0x77, 0x30, 0x44, 0x9b, 0xe8, 0xeb, 0x1d, 0x0c, 0x97, 0x1b, 0x65, 0x5d, 0xfd, 0x50, 0x19, 0xd1,
		0xd4, 0x75, 0x76, 0x23, 0x1a, 0x45, 0x47, 0x53, 0xa2, 0xa2, 0x81, 0x7e, 0x87, 0x64, 0x88, 0x70,
		0x6f, 0x22, 0xc2, 0x30, 0x81, 0x61, 0x42, 0xbf, 0x31, 0x58, 0x0b, 0xc3, 0xa4, 0x14, 0xef, 0x37,
		0xfd, 0x06, 0x60, 0x19, 0x06, 0x92, 0x8a, 0xc2, 0x91, 0xee, 0x67, 0x8a, 0x06, 0xa3, 0xc7, 0x1d,
		0xc7, 0x51, 0x94, 0xe1, 0xa7, 0x8e, 0x7b, 0xea, 0xbe, 0x79, 0x80, 0x30, 0x9a, 0x55, 0x5d, 0x62,
		0x29, 0x32, 0x5a, 0x60, 0xc4, 0x90, 0x67, 0xad, 0x1a, 0x50, 0x92, 0xcd, 0x90, 0xc0, 0xb8, 0x84,
		0x66, 0x4d, 0x70, 0xd6, 0x84, 0x67, 0x41, 0x80, 0x44, 0x01, 0x5c, 0x5a, 0x59, 0xb6, 0x70, 0x20,
		0x95, 0x4c, 0x74, 0xec, 0x6b, 0xf9, 0x55, 0x4c, 0xae, 0x03, 0x58, 0xd4, 0x67, 0x2b, 0xee, 0x0f,
		0x15, 0x57, 0xdc, 0x92, 0xbc, 0x33, 0xd2, 0x77, 0xc6, 0x02, 0x6c, 0xe5, 0x9c, 0xc7, 0x10, 0x0c,
		0x5d, 0xae, 0xe5, 0xa6, 0xe2, 0x0a, 0x2f, 0x06, 0x9c, 0xe3, 0xea, 0x72, 0xe3, 0xfa, 0x2a, 0x97,
		0x55, 0x6d, 0x3c, 0x64, 0x76, 0xae, 0x08, 0xe2, 0xbc, 0xbc, 0x7e, 0x14, 0x7c, 0xf1, 0x32, 0x3d,
		0xf9, 0xab, 0x68, 0xef, 0xa2, 0xbe, 0x4a, 0x05, 0xb3, 0x1b, 0xfa, 0x49, 0xd2, 0xcc, 0xe9, 0xa5,
		0x2a, 0x9b, 0x60, 0x53, 0xf7, 0x4d, 0x0e, 0x06, 0x22, 0x94, 0xbe, 0x6e, 0xe2, 0xce, 0xfd, 0x3b,
		0x95, 0x22, 0x09, 0x32, 0x3c, 0xa8, 0xb8, 0xee, 0x4e, 0xa7, 0x36, 0x51, 0x01, 0x14, 0x7f, 0xc3,
		0xd2, 0x2a, 0xd2, 0x92, 0xe4, 0x6c, 0xdb, 0x13, 0x56, 0x06, 0x10, 0x5b, 0x5d, 0xec, 0x1c, 0xba,
		0x18, 0x74, 0x31, 0xe8, 0x62, 0xa5, 0x33, 0x6a, 0xfd, 0x35, 0xb1, 0xfc, 0xa4, 0x28, 0x79, 0x48,
		0xb5, 0x96, 0xaa, 0xe7, 0x85, 0xd1, 0x37, 0xd5, 0x20, 0xc0, 0xcb, 0x67, 0x97, 0x2b, 0x2a, 0x9c,
		0x34, 0x3f, 0x35, 0x9f, 0x98, 0xf5, 0xb4, 0x0e, 0x08, 0xc4, 0x83, 0x48, 0x29, 0x91, 0xc7, 0x84,
		0x64, 0x8b, 0x97, 0x26, 0x7c, 0x04, 0x5f, 0xed, 0xea, 0x00, 0x5c, 0x29, 0x44, 0xbf, 0xe1, 0x81,
		0x00, 0x38, 0xcd, 0xaf, 0xb8, 0x2f, 0x10, 0xbe, 0x42, 0xe0, 0x94, 0x30, 0xaa, 0x42, 0x34, 0x67,
		0x14, 0x95, 0x69, 0xbf, 0x53, 0xe9, 0x20, 0x9b, 0x47, 0x4d, 0xa4, 0x07, 0x23, 0xad, 0xd7, 0xa6,
		0x05, 0xb6, 0xaa, 0xe5, 0xd8, 0xa2, 0x9f, 0x32, 0xc0, 0x21, 0x0b, 0x23, 0xc0, 0x74, 0x74, 0xd4,
		0x13, 0x8b, 0x99, 0xa5, 0xcc, 0x4a, 0x53, 0xb6, 0x5e, 0xe9, 0x61, 0xa4, 0x2d, 0x73, 0x04, 0xb6,
		0xd6, 0xec, 0xe2, 0x82, 0x6d, 0xdc, 0xb0, 0x8f, 0x2b, 0x36, 0x72, 0xce, 0x4e, 0xce, 0xd9, 0xca,
		0x19, 0x7b, 0xd9, 0x29, 0xc8, 0x4c, 0x6b, 0x81, 0x0f, 0xdc, 0x2b, 0x74, 0x62, 0x9d, 0x76, 0x6d,
		0x2d, 0xd8, 0xbc, 0xb2, 0xe8, 0xc3, 0xb2, 0x42, 0xbd, 0x1b, 0x8b, 0xaa, 0xe5, 0xaa, 0x62, 0xbd,
		0x23, 0x01, 0x53, 0xec, 0x2a, 0xb0, 0xaf, 0x60, 0x3f, 0xed, 0xcf, 0x61, 0xb1, 0x75, 0x07, 0xe6,
		0xf0, 0x6c, 0x0b, 0x1c, 0x54, 0xb6, 0x2f, 0x7b, 0x0b, 0xb8, 0x69, 0xe2, 0x2a, 0xd9, 0x83, 0xa3,
		0xdd, 0xb4, 0xee, 0x58, 0x08, 0x00, 0x6e, 0xda, 0xb9, 0x95, 0x8e, 0x2c, 0xd2, 0xd0, 0xd9, 0x7b,
		0x33, 0x78, 0xeb, 0xc7, 0xc9, 0x09, 0x45, 0x4f, 0x63, 0xb7, 0x16, 0x11, 0xa8, 0x69, 0xed, 0xa0,
		0x46, 0x41, 0x8d, 0x82, 0x1a, 0x05, 0xb5, 0x09, 0x6a, 0x13, 0xd4, 0x26, 0xea, 0x16, 0xb0, 0xd3,
		0x08, 0x36, 0x5a, 0x6f, 0xaa, 0x4a, 0xcf, 0x28, 0xd5, 0x33, 0xc4, 0x48, 0x63, 0xb8, 0x2a, 0xcf,
		0x28, 0xa9, 0x35, 0x8a, 0x64, 0x10, 0x2d, 0xd5, 0x46, 0x11, 0x0b, 0x59, 0xa7, 0xde, 0x58, 0xe9,
		0x94, 0x94, 0x8a, 0xc3, 0x76, 0x17, 0x88, 0x69, 0x12, 0x57, 0xda, 0x3b, 0x4a, 0x9b, 0x38, 0x0a,
		0xaa, 0x18, 0xfd, 0x7d, 0xe1, 0xc2, 0xa1, 0xdd, 0x72, 0x91, 0x51, 0xf1, 0xf7, 0x6c, 0x4c, 0xa3,
		0xbf, 0x8c, 0xe4, 0x8a, 0x7c, 0x5e, 0xa2, 0x9c, 0x25, 0x88, 0x73, 0x7f, 0xe8, 0x0d, 0xe3, 0x48,
		0x47, 0x81, 0xcd, 0xad, 0xee, 0xc5, 0x6e, 0x70, 0x02, 0x59, 0x96, 0xbe, 0x8e, 0x13, 0xc8, 0x1d,
		0x9c, 0x40, 0x2e, 0x10, 0xf7, 0xc1, 0x9f, 0x3e, 0xba, 0x38, 0x72, 0xb4, 0x3e, 0x67, 0x44, 0xe0,
		0xc7, 0x9e, 0x4b, 0x8a, 0x26, 0x5e, 0x36, 0x34, 0x4c, 0x08, 0xe9, 0xd2, 0x2e, 0xb7, 0xf6, 0x62,
		0x56, 0x9b, 0x40, 0xd2, 0xce, 0x0e, 0x29, 0x49, 0x9e, 0x0d, 0x2d, 0xe4, 0xd8, 0x10, 0xba, 0x0e,
		0x74, 0x9d, 0x26, 0xc9, 0x30, 0x39, 0xf4, 0xfc, 0x30, 0x8c, 0x45, 0x92, 0xd8, 0x48, 0xb2, 0xd7,
		0x8c, 0xb6, 0xe3, 0xb1, 0xf3, 0xc4, 0x98, 0x03, 0xff, 0xaa, 0x1c, 0x7e, 0xbd, 0xb0, 0x98, 0xbb,
		0x53, 0x2f, 0xab, 0xb3, 0xb3, 0xa9, 0xe3, 0xe3, 0x4c, 0x46, 0x77, 0xfe, 0xfc, 0x74, 0xe6, 0xbd,
		0xee, 0xe4, 0x2f, 0xcf, 0x46, 0xff, 0xe5, 0xaf, 0xcf, 0x3f, 0x9d, 0x7a, 0x17, 0x93, 0xd7, 0x97,
		0x9f, 0x4e, 0xbd, 0xcb, 0xce, 0xc9, 0xdd, 0xdd, 0xf3, 0x93, 0x1f, 0x2f, 0x9f, 0xe8, 0x0d, 0x8f,
		0xff, 0xf2, 0xe9, 0xee, 0x6e, 0xf8, 0xe3, 0xf7, 0xa7, 0xec, 0xef, 0x6f, 0x4f, 0x9d, 0x9f, 0x4f,
		0xde, 0x54, 0x7e, 0x12, 0xf6, 0x6c, 0x87, 0xd4, 0x73, 0xd5, 0x40, 0xea, 0xb9, 0xf9, 0x73, 0x1e,
		0xe3, 0x4f, 0x9f, 0x5d, 0x3c, 0x9d, 0xdc, 0x9c, 0x1c, 0x2f, 0x7f, 0x76, 0x73, 0xf2, 0xe3, 0xf4,
		0xd9, 0xe5, 0xd3, 0xf1, 0x71, 0xc1, 0x37, 0x6f, 0x8a, 0xfa, 0x38, 0xf9, 0xf3, 0xf8, 0xf8, 0x78,
		0x4c, 0x37, 0x0b, 0xb4, 0xf4, 0xe9, 0xf4, 0xac, 0xf3, 0x66, 0xf4, 0x32, 0xff, 0x3b, 0xa5, 0x46,
		0xa3, 0x87, 0x4f, 0x0a, 0x69, 0xf0, 0x99, 0x35, 0x0b, 0xfd, 0xcf, 0x4d, 0xe7, 0xe7, 0x9b, 0x93,
		0x1f, 0x57, 0x4f, 0x93, 0xd7, 0xa3, 0xbf, 0x27, 0x7f, 0x1e, 0x3f, 0xff, 0xe9, 0xee, 0xee, 0xf9,
		0xf3, 0x9f, 0x4e, 0xf2, 0x09, 0x8d, 0x9f, 0xfb, 0x29, 0xff, 0xf6, 0xcd, 0xcd, 0xcd, 0xca, 0x47,
		0x27, 0xc7, 0x7f, 0x79, 0xbe, 0x0b, 0xb6, 0xd8, 0x4b, 0xc5, 0xcc, 0x2c, 0xdb, 0xef, 0x5a, 0x8e,
		0x34, 0xc9, 0xfe, 0x0b, 0xf3, 0x12, 0xe6, 0xe5, 0xde, 0xa8, 0x66, 0xec, 0x03, 0x60, 0x2b, 0x03,
		0xd3, 0xf2, 0xc0, 0xd7, 0x02, 0x5a, 0x5d, 0x1c, 0xf0, 0x3a, 0x3a, 0x55, 0x74, 0x75, 0xa0, 0xeb,
		0xf2, 0x0c, 0xd1, 0xe2, 0x00, 0xd7, 0xc9, 0xc1, 0xad, 0xeb, 0xa5, 0xbd, 0xba, 0xa8, 0xd1, 0xda,
		0x1e, 0x12, 0xcc, 0x12, 0xb3, 0x3b, 0xaf, 0x07, 0x5c, 0x56, 0xe6, 0x5c, 0x40, 0x2f, 0xa0, 0x17,
		0x61, 0xe4, 0xeb, 0xdb, 0xba, 0x0d, 0x23, 0xb7, 0xe3, 0xd1, 0x45, 0x99, 0x5d, 0x8b, 0x08, 0x72,
		0x57, 0xd9, 0xb0, 0x1d, 0xa2, 0x6b, 0x59, 0x33, 0xa3, 0x66, 0xcf, 0xde, 0x83, 0x29, 0xd9, 0x64,
		0xdb, 0xde, 0x83, 0xe9, 0x71, 0xb3, 0x73, 0xd7, 0x7f, 0x6a, 0x8c, 0x6c, 0xde, 0x6e, 0x74, 0xac,
		0xfd, 0x8c, 0xf7, 0x37, 0xca, 0x16, 0xbe, 0x76, 0xf1, 0x0d, 0xb2, 0x87, 0x43, 0x9b, 0x82, 0x36,
		0xb5, 0x3f, 0x8e, 0x0c, 0x57, 0x01, 0x81, 0x70, 0x6c, 0xc0, 0xb1, 0xb1, 0x07, 0x8e, 0x8d, 0x97,
		0x07, 0xe8, 0xd8, 0xd8, 0xc9, 0x55, 0x16, 0xfb, 0x40, 0xbc, 0x3a, 0x38, 0x64, 0xd4, 0xbd, 0x27,
		0x43, 0x0b, 0x6d, 0x61, 0xd4, 0x1c, 0xd7, 0x52, 0x0e, 0x54, 0x61, 0x68, 0xe6, 0xb5, 0x14, 0xa8,
		0x0c, 0x50, 0x19, 0xa0, 0x32, 0x40, 0x65, 0x80, 0xca, 0x50, 0xac, 0x32, 0x50, 0xaa, 0x88, 0xac,
		0x6a, 0x0c, 0xe6, 0xd5, 0x44, 0xa0, 0x30, 0x40, 0x61, 0xd8, 0x0b, 0x85, 0xa1, 0x31, 0x27, 0x36,
		0x93, 0x34, 0xe9, 0xe3, 0xd8, 0x47, 0x6e, 0xf8, 0x51, 0xab, 0x5e, 0xc7, 0x36, 0xc2, 0xcb, 0x84,
		0x8e, 0x77, 0xbf, 0xcf, 0x3e, 0xf1, 0x9e, 0xfd, 0x1c, 0x0e, 0xc8, 0x05, 0x1e, 0x0d, 0x45, 0x3c,
		0x8a, 0x12, 0xf6, 0xfb, 0xb6, 0x17, 0x0d, 0x56, 0xbb, 0x42, 0xc6, 0xfa, 0x83, 0x84, 0x2e, 0x5c,
		0x35, 0xa8, 0x31, 0x70, 0xd9, 0x72, 0x69, 0x0d, 0x51, 0x6b, 0x65, 0x4a, 0x9e, 0x50, 0xfe, 0x7d,
		0x7f, 0xbf, 0x0f, 0xe5, 0x57, 0x27, 0x15, 0xca, 0xc4, 0x76, 0x56, 0x07, 0x04, 0x6c, 0xc3, 0xfe,
		0x40, 0x59, 0x39, 0x6c, 0x27, 0x1d, 0xc0, 0x02, 0x83, 0x05, 0xd6, 0x20, 0x20, 0x83, 0xcb, 0x16,
		0x2e, 0xdb, 0x72, 0x80, 0x0f, 0x2e, 0xdb, 0x52, 0xe0, 0x17, 0x2e, 0xdb, 0x4a, 0xd5, 0x86, 0x28,
		0xd6, 0x16, 0x3a, 0x43, 0xd6, 0x1a, 0x0a, 0x03, 0x14, 0x86, 0x06, 0x29, 0x0c, 0x19, 0x4d, 0x7b,
		0x2a, 0x1d, 0xdc, 0xf3, 0x92, 0xb5, 0x8d, 0xc9, 0xfb, 0x8a, 0xd1, 0xf4, 0x83, 0xaf, 0x7a, 0x02,
		0x3a, 0x42, 0x0e, 0x64, 0xa7, 0xd0, 0x11, 0x4a, 0xd3, 0x11, 0x2e, 0x2f, 0x5f, 0x5e, 0x22, 0xca,
		0xcd, 0x19, 0xdc, 0x3a, 0xad, 0x8c, 0x3f, 0xce, 0x26, 0x4a, 0x4e, 0x4d, 0xc6, 0x4b, 0x21, 0xca,
		0x4f, 0x1d, 0xea, 0x34, 0x65, 0x28, 0x2f, 0x55, 0xa8, 0xe9, 0x92, 0x32, 0x53, 0x83, 0xba, 0x4f,
		0x09, 0x4a, 0xc0, 0x13, 0x87, 0x49, 0x3f, 0xcd, 0x20, 0x7a, 0x3b, 0x15, 0x6f, 0x7e, 0x62, 0xcb,
		0x66, 0x50, 0x37, 0xc1, 0xe9, 0xe2, 0x1b, 0xac, 0xbb, 0x9b, 0xf5, 0xde, 0xbc, 0xd4, 0xeb, 0x17,
		0x70, 0xc3, 0xe2, 0x31, 0x4e, 0xac, 0xd8, 0xbe, 0x6f, 0x43, 0xa0, 0x31, 0x3e, 0x81, 0xa2, 0xe8,
		0xde, 0xb4, 0x13, 0x26, 0xaa, 0x66, 0xcd, 0xd6, 0xa4, 0xd9, 0x9a, 0x33, 0xf9, 0x84, 0xc8, 0x8e,
		0xbd, 0x8c, 0xf5, 0x5e, 0xe6, 0x09, 0x0f, 0xe5, 0x44, 0x87, 0x77, 0x82, 0x63, 0x7d, 0x62, 0xc3,
		0x39, 0xa1, 0x71, 0x75, 0xf4, 0x4b, 0x3f, 0x81, 0x21, 0x28, 0x95, 0xce, 0x06, 0x49, 0x3f, 0x51,
		0x31, 0xd3, 0x6d, 0x3a, 0xb6, 0xc4, 0xcd, 0x12, 0x8c, 0xdf, 0xfd, 0xe1, 0x30, 0x31, 0x17, 0x86,
		0xf9, 0xe3, 0x66, 0x02, 0xf0, 0xcc, 0x54, 0x00, 0x9e, 0x96, 0x20, 0x00, 0xe3, 0xef, 0x7e, 0xd8,
		0x3c, 0x11, 0x38, 0x9a, 0x55, 0xc9, 0x42, 0xd0, 0xb4, 0x46, 0xe3, 0x88, 0x16, 0xe8, 0x82, 0x69,
		0xd4, 0xca, 0x54, 0x8d, 0x27, 0x15, 0x22, 0x25, 0x7b, 0xb7, 0x38, 0x5e, 0x2d, 0x2a, 0x81, 0xd9,
		0x7a, 0xb1, 0xac, 0xbd, 0x57, 0xd6, 0x5e, 0x2b, 0x06, 0x01, 0x96, 0x63, 0xd4, 0x51, 0x8b, 0x87,
		0x2e, 0x97, 0x36, 0x1f, 0x6b, 0xb6, 0x7c, 0x47, 0xed, 0x9a, 0xfe, 0x10, 0xcd, 0x7b, 0x90, 0x8e,
		0x5b, 0x5c, 0x58, 0xb2, 0x51, 0x6f, 0xdd, 0xa8, 0xbb, 0xe5, 0xb2, 0xaa, 0x8d, 0x4e, 0xec, 0xce,
		0xb1, 0x6c, 0x30, 0x2f, 0xaf, 0x1f, 0x05, 0x5f, 0x3c, 0x3f, 0xc8, 0x3e, 0xdb, 0xe7, 0xeb, 0x4b,
		0x9b, 0x66, 0x37, 0xf4, 0x93, 0xa4, 0x99, 0xd3, 0x4b, 0x55, 0x36, 0xc1, 0xa6, 0xee, 0x9b, 0x1c,
		0x0c, 0x44, 0x28, 0x33, 0x03, 0xb4, 0x79, 0x13, 0xfc, 0x77, 0x2a, 0x45, 0x12, 0x64, 0x78, 0x80,
		0xdb, 0x75, 0x74, 0x7d, 0xcc, 0xf2, 0xe6, 0x78, 0x61, 0x6f, 0xb8, 0x3c, 0x0e, 0x5d, 0x0c, 0xba,
		0x58, 0xad, 0x75, 0xb1, 0x86, 0xdc, 0x1f, 0x2f, 0x9a, 0x95, 0x97, 0x3c, 0xa4, 0x5a, 0x4b, 0xd5,
		0xf3, 0xc2, 0xe8, 0x9b, 0x6a, 0x10, 0xe0, 0xe5, 0xb3, 0xcb, 0x15, 0x95, 0xfd, 0xbe, 0x21, 0x5f,
		0x38, 0x31, 0xeb, 0x69, 0x1d, 0x10, 0x88, 0x17, 0x17, 0x64, 0x64, 0xa3, 0xb8, 0x8b, 0xfa, 0x8e,
		0x44, 0x3f, 0x21, 0x5c, 0x2a, 0x80, 0x71, 0xd3, 0xd1, 0x51, 0x7d, 0x8e, 0x33, 0x5d, 0x77, 0xa1,
		0x90, 0xad, 0x3d, 0x86, 0x5a, 0xd4, 0xc5, 0xb5, 0xd4, 0x76, 0xad, 0xd9, 0xc5, 0x05, 0xdb, 0xb8,
		0x61, 0x1f, 0x57, 0x6c, 0xe4, 0x9c, 0x9d, 0x9c, 0xb3, 0x95, 0x33, 0xf6, 0xb2, 0x83, 0xb8, 0x1a,
		0x54, 0xda, 0x77, 0x15, 0xb9, 0xb2, 0x02, 0x36, 0xa8, 0xbc, 0xef, 0x58, 0xc0, 0x14, 0x2b, 0xfb,
		0xa8, 0xbc, 0x5f, 0x87, 0x2d, 0xb0, 0x8d, 0x88, 0x29, 0x75, 0x0f, 0x76, 0x55, 0x78, 0xbf, 0x0e,
		0x65, 0xbd, 0x1c, 0x44, 0xd0, 0xf0, 0xed, 0x11, 0xde, 0xfa, 0x31, 0x78, 0x66, 0x72, 0x93, 0x57,
		0xc4, 0xf6, 0xaa, 0xd4, 0xac, 0x2b, 0xa8, 0x51, 0x50, 0xa3, 0xa0, 0x46, 0x99, 0xa9, 0x51, 0x50,
		0x9b, 0xa0, 0x36, 0x41, 0x6d, 0xa2, 0x6e, 0xc1, 0xf9, 0xe5, 0x25, 0xf4, 0xa6, 0x9d, 0xe9, 0x19,
		0xa5, 0x7a, 0x86, 0xc6, 0x21, 0x46, 0x36, 0x8e, 0x19, 0x5e, 0xb4, 0xd1, 0xbc, 0x0c, 0xe2, 0x45,
		0x1d, 0xcd, 0xb3, 0x90, 0xb3, 0xe8, 0xa3, 0x69, 0xa7, 0xac, 0x28, 0x24, 0xee, 0x2e, 0x30, 0xa3,
		0x92, 0xa6, 0xed, 0x1d, 0x05, 0xc8, 0x8c, 0xae, 0x45, 0x8f, 0xfe, 0xbe, 0x70, 0xe1, 0xd0, 0x6e,
		0xb9, 0x88, 0xa5, 0xf9, 0xaf, 0x6c, 0x4c, 0xa3, 0xbf, 0x73, 0xdf, 0xde, 0xce, 0x86, 0x54, 0x87,
		0x72, 0xfd, 0x0e, 0x0e, 0x10, 0xac, 0x4f, 0x0d, 0x70, 0x11, 0xb3, 0x32, 0xfd, 0x1c, 0x87, 0xff,
		0xa6, 0xfb, 0x9c, 0xa6, 0xe4, 0x24, 0x52, 0xb6, 0x5a, 0xb6, 0x83, 0x6c, 0x1e, 0x73, 0xa5, 0xc1,
		0x5f, 0x3d, 0x79, 0xf3, 0x6f, 0x2f, 0x28, 0x6f, 0xcf, 0xce, 0x9f, 0xda, 0xa8, 0x72, 0x0d, 0x29,
		0x06, 0x29, 0xb6, 0xe7, 0x52, 0x0c, 0x69, 0xc2, 0x76, 0x66, 0x8a, 0x22, 0x4d, 0x58, 0xf9, 0x4b,
		0x8b, 0x2a, 0xd7, 0x3b, 0x82, 0x59, 0x54, 0xb9, 0x06, 0xf4, 0x02, 0x7a, 0x0d, 0xcc, 0x62, 0x54,
		0xb9, 0x5e, 0x90, 0xd9, 0xa8, 0x72, 0x5d, 0xed, 0xcc, 0x50, 0xe5, 0x7a, 0xdf, 0xa6, 0x87, 0x2a,
		0xd7, 0xce, 0x75, 0x2c, 0x54, 0xb9, 0x86, 0x36, 0x05, 0x6d, 0x6a, 0xcf, 0x1d, 0x19, 0xc8, 0x7f,
		0x0e, 0xc7, 0xc6, 0x01, 0x39, 0x36, 0x90, 0xff, 0xdc, 0x0c, 0x42, 0x90, 0xff, 0x7c, 0xaa, 0x2c,
		0x24, 0x43, 0x3f, 0xb0, 0xd4, 0x18, 0xf2, 0x2e, 0x0e, 0x21, 0x13, 0x3a, 0x2d, 0x77, 0xd4, 0x81,
		0x28, 0x0e, 0xb4, 0xdc, 0x52, 0x7b, 0xa3, 0x3a, 0xd8, 0xab, 0x0a, 0xa8, 0xf8, 0xe7, 0x94, 0xe3,
		0x91, 0xb4, 0x01, 0x86, 0x42, 0x59, 0xdc, 0x8e, 0x8a, 0x7f, 0x85, 0x3a, 0x25, 0x2a, 0xfe, 0x55,
		0x37, 0x29, 0x54, 0xfc, 0x23, 0x01, 0xdb, 0x57, 0x11, 0xc7, 0x32, 0x14, 0x5e, 0x57, 0xf6, 0x6d,
		0x40, 0x6d, 0xa1, 0x1b, 0xa8, 0xb0, 0x50, 0x61, 0xa1, 0xc2, 0xd6, 0x4c, 0x85, 0x8d, 0x45, 0x5f,
		0xf8, 0x89, 0xf0, 0xec, 0x3c, 0xdb, 0x0b, 0xbd, 0x80, 0xcf, 0xc1, 0xe7, 0xe0, 0xf3, 0x9a, 0xf1,
		0xf9, 0x57, 0x11, 0x27, 0x9c, 0x78, 0x90, 0xe9, 0x32, 0x4c, 0x3a, 0x00, 0x77, 0x83, 0xbb, 0xc1,
		0xdd, 0x55, 0x70, 0x77, 0x19, 0xb5, 0xbf, 0x08, 0x00, 0x8d, 0xaa, 0x5f, 0xeb, 0xd9, 0x62, 0xb7,
		0x55, 0xbf, 0x66, 0x71, 0x75, 0x55, 0x56, 0xfd, 0x9a, 0x45, 0xce, 0x1d, 0x74, 0xd5, 0x2f, 0x93,
		0x5a, 0x2f, 0xee, 0xd6, 0x9b, 0x5d, 0xf5, 0xeb, 0x88, 0xb0, 0xa4, 0xc6, 0x85, 0x01, 0xcd, 0x44,
		0x82, 0xb9, 0x08, 0xb0, 0x62, 0x79, 0x33, 0x16, 0x5f, 0x37, 0xe5, 0xb7, 0x69, 0x2f, 0xfb, 0x59,
		0x11, 0x6e, 0xf4, 0xc1, 0x19, 0xd6, 0xff, 0x79, 0x91, 0xd1, 0xd0, 0x4d, 0x01, 0x01, 0x2d, 0x7f,
		0x3e, 0xa1, 0xa2, 0x6d, 0xb5, 0x82, 0x7e, 0x15, 0x49, 0x10, 0xcb, 0xe1, 0x98, 0xb8, 0xdb, 0xb7,
		0xea, 0x41, 0xc4, 0x52, 0xfb, 0x2a, 0x10, 0xad, 0x6e, 0x1c, 0x0d, 0x5a, 0x59, 0xbf, 0xad, 0xe8,
		0xfe, 0x7f, 0x45, 0xa0, 0x5b, 0x41, 0xdf, 0x4f, 0x92, 0xe7, 0x7b, 0x51, 0x7d, 0x28, 0x0d, 0x1a,
		0x58, 0x7c, 0x28, 0x0d, 0x6a, 0x53, 0x7b, 0x28, 0x98, 0xec, 0x1e, 0xb1, 0xfa, 0xd0, 0xb8, 0x9d,
		0x69, 0xc5, 0x99, 0x45, 0xe2, 0xfc, 0xe3, 0x41, 0xb4, 0x32, 0x12, 0xf7, 0xa5, 0x12, 0x71, 0xab,
		0x1b, 0xc5, 0xad, 0xbc, 0xbb, 0x34, 0xf7, 0xc0, 0xb6, 0x42, 0x5f, 0xfb, 0x8d, 0x28, 0x6d, 0x64,
		0x44, 0xbd, 0xb6, 0xc6, 0x40, 0xdd, 0x2a, 0x1b, 0x99, 0x50, 0x37, 0x51, 0x63, 0xdd, 0x45, 0x45,
		0x37, 0x08, 0x72, 0xa7, 0x82, 0xdc, 0xac, 0x66, 0xfd, 0xbe, 0x49, 0x72, 0xa3, 0x9a, 0xf3, 0x15,
		0x89, 0xf2, 0xbc, 0xb8, 0x2c, 0x59, 0x92, 0x9b, 0xd6, 0xa4, 0x2d, 0x22, 0xce, 0x8f, 0xda, 0xd7,
		0x62, 0x24, 0xae, 0xe7, 0xe4, 0x79, 0xd4, 0x6d, 0xe9, 0x07, 0xd1, 0x22, 0xf5, 0xcb, 0x95, 0xe2,
		0xe7, 0x55, 0x48, 0x71, 0x33, 0xd2, 0x6d, 0x9a, 0x18, 0x37, 0x22, 0x6d, 0xc8, 0x71, 0x53, 0x56,
		0x79, 0xab, 0x5a, 0x7e, 0x6e, 0x40, 0x8c, 0x74, 0x9c, 0x67, 0xad, 0x6f, 0x0f, 0x32, 0x78, 0x68,
		0xf9, 0x61, 0x98, 0xb4, 0xa4, 0xd0, 0x5d, 0x4f, 0x2a, 0x2d, 0xe2, 0xae, 0x1f, 0x88, 0xe4, 0x4e,
		0xe9, 0xa8, 0xb5, 0xee, 0x67, 0xf7, 0x42, 0xda, 0x47, 0xb2, 0xdb, 0xc0, 0xb2, 0xc9, 0xb2, 0x5b,
		0x1b, 0x59, 0x3f, 0x25, 0x16, 0x2f, 0x16, 0x5d, 0x11, 0x0b, 0x15, 0x30, 0x4a, 0x1b, 0x17, 0x75,
		0xc2, 0xc3, 0x81, 0xb7, 0xad, 0xbe, 0x4c, 0x74, 0x26, 0xf9, 0x97, 0x48, 0xb9, 0x35, 0xed, 0x39,
		0x69, 0xa5, 0x89, 0x54, 0xbd, 0x11, 0x34, 0x4c, 0xbf, 0x6f, 0x29, 0x7f, 0x20, 0x5a, 0x7e, 0xd2,
		0xfa, 0x22, 0x1e, 0x9f, 0x13, 0xb1, 0xe2, 0xb4, 0x8e, 0x58, 0x61, 0x46, 0xf8, 0x0d, 0x83, 0x0a,
		0x23, 0xc6, 0x28, 0xc7, 0x47, 0x4d, 0xf6, 0xe6, 0x17, 0x13, 0x3f, 0x65, 0xcf, 0x26, 0xf2, 0xf5,
		0x9a, 0xd0, 0xe6, 0x9f, 0x13, 0x17, 0xa2, 0xec, 0xde, 0xcc, 0x98, 0x63, 0xe1, 0x5d, 0xf6, 0x66,
		0xe4, 0xf9, 0x73, 0xba, 0x3e, 0x07, 0xe8, 0x90, 0x87, 0xad, 0xb8, 0xf7, 0xb6, 0x22, 0x4a, 0x8e,
		0x97, 0xad, 0x3f, 0x98, 0x55, 0xab, 0x5f, 0xd9, 0x19, 0xd3, 0x93, 0x8c, 0x22, 0xe2, 0xfc, 0x6d,
		0xac, 0x21, 0x7c, 0x7f, 0x3b, 0x1c, 0x26, 0x2d, 0x1d, 0xb5, 0xee, 0x45, 0x6b, 0xe0, 0x2b, 0xbf,
		0x27, 0xc2, 0xe7, 0xa8, 0x63, 0xbe, 0xb7, 0x66, 0x62, 0x19, 0x75, 0xcc, 0xcb, 0x13, 0xe1, 0x85,
		0xdf, 0x74, 0xd6, 0x1d, 0xf8, 0x98, 0x1d, 0x17, 0x3a, 0x3a, 0x26, 0xdc, 0xb0, 0x8d, 0xb6, 0x07,
		0x83, 0xc5, 0x1b, 0xb4, 0xba, 0x18, 0x05, 0xe2, 0x85, 0x58, 0xa6, 0x8c, 0x55, 0x8e, 0x6c, 0x0b,
		0x5b, 0x6f, 0x65, 0x63, 0x13, 0xb6, 0x35, 0x0b, 0x20, 0x31, 0x65, 0x4a, 0x32, 0x13, 0x92, 0x99,
		0xce, 0x38, 0xc0, 0x83, 0x76, 0x6c, 0xbb, 0x0d, 0x20, 0x88, 0xe5, 0xb6, 0x58, 0x65, 0xb5, 0x0c,
		0x0d, 0xb8, 0x92, 0x3d, 0x14, 0x71, 0x03, 0x1d, 0x14, 0x71, 0xd9, 0xfa, 0x85, 0xb1, 0xb9, 0x65,
		0x1f, 0xf0, 0x4f, 0x09, 0xf0, 0xa7, 0x06, 0xf4, 0xd3, 0x4c, 0x21, 0x06, 0x44, 0xf3, 0x6e, 0x30,
		0x32, 0x03, 0xf2, 0x6d, 0x82, 0xc4, 0x9f, 0x68, 0xb6, 0x5d, 0xe5, 0x4b, 0x41, 0x0d, 0xa0, 0xb7,
		0x5a, 0x0b, 0x47, 0xca, 0x89, 0x41, 0x00, 0x3c, 0x39, 0xe0, 0x9d, 0x13, 0xe0, 0xde, 0x71, 0x6f,
		0xe7, 0x12, 0xca, 0x07, 0x91, 0xcb, 0x04, 0x01, 0x16, 0x0e, 0x09, 0x16, 0x00, 0x03, 0x80, 0x01,
		0xf3, 0xa5, 0x20, 0x97, 0x7f, 0xa9, 0x05, 0x0e, 0x54, 0x79, 0x11, 0xd3, 0x44, 0x01, 0x6f, 0xd2,
		0x5d, 0xcc, 0x4a, 0x4c, 0x73, 0xa3, 0x92, 0x18, 0x5c, 0xe3, 0x7c, 0x5b, 0x05, 0x11, 0x33, 0xf3,
		0x9c, 0x62, 0x93, 0x1b, 0x1b, 0xe2, 0xa7, 0x30, 0xc4, 0xcb, 0x36, 0xc4, 0xb7, 0x42, 0xa6, 0x69,
		0x05, 0x0b, 0x13, 0x80, 0x34, 0x56, 0x37, 0xab, 0xa9, 0x3c, 0xd1, 0xb1, 0xa0, 0xf7, 0xcd, 0x95,
		0x21, 0x8c, 0x2a, 0x40, 0x80, 0xca, 0x6b, 0x48, 0xe5, 0x5b, 0x15, 0x42, 0x23, 0x3a, 0x37, 0x54,
		0x00, 0x0d, 0x14, 0x55, 0x8a, 0xc2, 0x47, 0xbd, 0x91, 0x40, 0x54, 0xf0, 0x38, 0xba, 0x8c, 0x81,
		0x42, 0x47, 0x52, 0xe4, 0xb8, 0x53, 0x34, 0xcd, 0xec, 0xcf, 0x9a, 0x23, 0x53, 0xbf, 0xb2, 0x12,
		0x3f, 0x86, 0x19, 0xf3, 0x89, 0x59, 0xb7, 0x21, 0x92, 0x6a, 0x28, 0x92, 0xcc, 0x52, 0x10, 0x99,
		0xa4, 0x1a, 0xa2, 0xa5, 0x14, 0x62, 0x66, 0x6c, 0xa7, 0x24, 0x08, 0x22, 0x1e, 0xfb, 0xda, 0x66,
		0x5a, 0x37, 0x90, 0x46, 0xb6, 0x23, 0x32, 0xcd, 0x90, 0x5e, 0xc1, 0x50, 0x38, 0x99, 0xcd, 0x2b,
		0x18, 0x16, 0x35, 0x23, 0x79, 0xf9, 0x43, 0x22, 0x64, 0x12, 0xdf, 0x2c, 0xeb, 0x3b, 0x54, 0xd9,
		0x60, 0x24, 0xeb, 0x37, 0xe6, 0x37, 0x31, 0xc9, 0xd0, 0x0d, 0xa9, 0x5e, 0x47, 0x45, 0x93, 0x7a,
		0x20, 0x05, 0xc5, 0x73, 0x2f, 0x15, 0xcf, 0x97, 0x35, 0x54, 0x3c, 0x9d, 0x58, 0xe8, 0xe6, 0x07,
		0x41, 0x36, 0x8a, 0xae, 0x79, 0x9e, 0x52, 0x72, 0xa6, 0x43, 0x63, 0xb1, 0x78, 0x0e, 0xb1, 0x78,
		0x38, 0xca, 0x2e, 0x35, 0x4f, 0x66, 0x89, 0xea, 0xae, 0x45, 0x7e, 0x4b, 0xf7, 0x4a, 0x93, 0x4d,
		0x5e, 0xca, 0xd2, 0xb5, 0xa6, 0xa3, 0x0d, 0x73, 0xdf, 0xe6, 0xa3, 0x67, 0xf8, 0xe6, 0x0b, 0x48,
		0x82, 0xe4, 0x7d, 0x5f, 0x5c, 0xb1, 0xd9, 0xe8, 0xe7, 0x46, 0x3e, 0x8b, 0x0b, 0x58, 0xbd, 0x1e,
		0xbb, 0x1a, 0x3b, 0xb0, 0x7c, 0x17, 0x76, 0xcd, 0x4d, 0xb6, 0xb5, 0x9a, 0xde, 0x26, 0x51, 0x36,
		0xfb, 0xb5, 0x22, 0x8e, 0xdc, 0x26, 0xba, 0x8c, 0x45, 0x96, 0xb1, 0xa8, 0x5a, 0x10, 0x51, 0x45,
		0x11, 0x1f, 0x9b, 0xa9, 0x61, 0xdd, 0xcd, 0xb3, 0xd9, 0x62, 0x1a, 0x1c, 0x60, 0x4c, 0x1f, 0xad,
		0xc1, 0x45, 0xc2, 0x8d, 0x91, 0x3e, 0x35, 0x45, 0x96, 0x4d, 0x81, 0x3a, 0xae, 0x2f, 0x12, 0x86,
		0x03, 0xa9, 0x46, 0x12, 0x2b, 0x4d, 0x08, 0xf7, 0x08, 0xe7, 0x5b, 0x39, 0xbe, 0x2f, 0x72, 0x5e,
		0xc2, 0x7d, 0x91, 0x26, 0xc6, 0x39, 0x96, 0x1f, 0xe6, 0x48, 0xbf, 0x2f, 0x22, 0x54, 0x3a, 0x18,
		0xe3, 0x20, 0xe5, 0xd2, 0x88, 0x81, 0xf7, 0xb9, 0xfd, 0x4e, 0xa5, 0x83, 0x6c, 0x30, 0x25, 0x84,
		0x05, 0xb5, 0xc3, 0x85, 0x10, 0x08, 0x43, 0x1e, 0x98, 0x6f, 0xb4, 0x07, 0x57, 0xa6, 0xc0, 0x02,
		0xd5, 0xb0, 0x00, 0xe3, 0xca, 0x54, 0x09, 0x14, 0x3d, 0xd1, 0x84, 0x8d, 0xa9, 0x79, 0xd2, 0x60,
		0x6b, 0x24, 0x5b, 0xd7, 0x4f, 0xfb, 0xa3, 0xc5, 0xcf, 0xf6, 0x0c, 0x84, 0x0f, 0xc2, 0x9f, 0xac,
		0xf3, 0x7d, 0x14, 0xf5, 0x85, 0x4f, 0x92, 0xfb, 0x67, 0x25, 0x50, 0xfe, 0x83, 0xec, 0x3d, 0x88,
		0xd8, 0xeb, 0xfb, 0x8f, 0x22, 0xf6, 0x24, 0x21, 0x36, 0x62, 0xb9, 0x21, 0xd4, 0x1a, 0x90, 0x36,
		0x33, 0x08, 0x9d, 0x12, 0x7c, 0xee, 0x2e, 0xe8, 0x7c, 0xdb, 0xbc, 0x49, 0x41, 0xe6, 0xf4, 0xe0,
		0x72, 0x27, 0x41, 0xe5, 0xb4, 0x60, 0x72, 0xe6, 0xe5, 0xf8, 0xae, 0x27, 0x55, 0x28, 0xbe, 0x13,
		0xee, 0xc6, 0x4f, 0x5a, 0x40, 0x26, 0x40, 0x26, 0xcc, 0x64, 0xc2, 0xcb, 0x73, 0x82, 0x2c, 0x30,
		0x38, 0xe8, 0x68, 0x7f, 0xf0, 0x55, 0x4f, 0xe0, 0x5e, 0x7c, 0xf3, 0xee, 0xc5, 0x9f, 0x5d, 0x5c,
		0x5f, 0xbc, 0x7a, 0x79, 0x75, 0x71, 0x7d, 0x40, 0xd7, 0xe3, 0x37, 0x48, 0xe0, 0xbe, 0x9f, 0x68,
		0x2f, 0x78, 0x18, 0x53, 0xbb, 0xe9, 0x35, 0x9b, 0xb9, 0x46, 0x90, 0xc3, 0x90, 0xc3, 0x13, 0x37,
		0x8c, 0xaf, 0x85, 0xe7, 0xab, 0xd0, 0xd3, 0xd2, 0x28, 0x01, 0x3e, 0x29, 0x52, 0x89, 0x1c, 0xff,
		0x77, 0x77, 0x17, 0xfe, 0xb8, 0x78, 0xf2, 0xb2, 0xff, 0xce, 0x27, 0xff, 0xfd, 0x91, 0xff, 0x77,
		0xb3, 0xf0, 0xdf, 0xf1, 0xdd, 0xdd, 0xf3, 0xbb, 0xbb, 0xf0, 0xe7, 0x93, 0x37, 0xc7, 0xff, 0xfd,
		0xe7, 0xa7, 0xbb, 0xbb, 0x9f, 0xef, 0xee, 0xbc, 0xce, 0xc2, 0x13, 0x27, 0xbb, 0x09, 0x1d, 0xec,
		0x4b, 0xf5, 0xc5, 0x4b, 0x87, 0x5e, 0x18, 0x7d, 0x53, 0x9e, 0x8e, 0xfd, 0xe1, 0xf8, 0x54, 0x8d,
		0x72, 0x1f, 0x6e, 0x4d, 0x0f, 0x70, 0x16, 0x80, 0x6b, 0xf7, 0xdb, 0x51, 0xdc, 0x8f, 0xbe, 0xb1,
		0x7c, 0x0b, 0x4b, 0xed, 0x00, 0x5f, 0x60, 0x04, 0xb8, 0x16, 0x1a, 0xe8, 0x5a, 0x30, 0xaa, 0xb5,
		0x67, 0x72, 0x27, 0x15, 0xa0, 0x78, 0x80, 0xb2, 0xa0, 0x1e, 0x47, 0x47, 0xd1, 0x50, 0xc4, 0xe4,
		0x0b, 0x01, 0xf3, 0x8d, 0x80, 0x6e, 0xa0, 0xe8, 0xfd, 0x56, 0xf3, 0x86, 0x0f, 0x8f, 0x89, 0xe7,
		0x87, 0x61, 0x2c, 0x12, 0x02, 0x0f, 0x2c, 0xb4, 0x02, 0x13, 0x80, 0x09, 0xe8, 0x74, 0x51, 0xbe,
		0x83, 0xe2, 0x78, 0x3e, 0xfc, 0xfb, 0xfc, 0xe9, 0xf8, 0x66, 0xf1, 0xfd, 0xc9, 0x4f, 0x27, 0x6f,
		0x76, 0xe3, 0x77, 0x48, 0x86, 0x82, 0x72, 0x5f, 0x21, 0x7f, 0x1c, 0x5c, 0x06, 0x2e, 0x1b, 0xaf,
		0x73, 0xcf, 0x4f, 0x7b, 0xe2, 0xea, 0x82, 0xc0, 0x60, 0xaf, 0x0e, 0xed, 0x44, 0xe6, 0x14, 0x27,
		0x32, 0xd3, 0xc3, 0x29, 0xab, 0x94, 0xe7, 0xad, 0x06, 0x9f, 0xcd, 0x64, 0x4a, 0xbc, 0x4c, 0xb4,
		0x0c, 0x08, 0x9a, 0xcf, 0x5c, 0x1b, 0xc7, 0x79, 0xcb, 0x21, 0x91, 0xeb, 0x22, 0x91, 0x8d, 0x73,
		0x96, 0x87, 0x32, 0x09, 0x22, 0xa5, 0xa5, 0x4a, 0xa5, 0x7e, 0xcc, 0x4f, 0x65, 0xc8, 0x09, 0xcc,
		0x0b, 0xfa, 0x28, 0xb9, 0xea, 0x48, 0x15, 0xa9, 0xc7, 0x0f, 0xb1, 0xe8, 0xc8, 0x3e, 0xd6, 0x1c,
		0xa1, 0x1e, 0x29, 0x72, 0x34, 0x77, 0xb6, 0x06, 0x3f, 0x6d, 0x58, 0xed, 0x51, 0xa3, 0x19, 0xe4,
		0x98, 0xef, 0xa4, 0x49, 0x00, 0xb2, 0x54, 0xde, 0x7d, 0x1c, 0xf9, 0x61, 0xe0, 0x27, 0xda, 0x1b,
		0x7e, 0xd1, 0x09, 0xa7, 0x76, 0xd2, 0x72, 0x17, 0x90, 0x23, 0x90, 0x23, 0x15, 0xc9, 0x91, 0x20,
		0x4a, 0x95, 0x16, 0xb1, 0x91, 0x51, 0xc2, 0x30, 0x4e, 0x98, 0x46, 0x0a, 0xdd, 0x58, 0xb1, 0x32,
		0x5a, 0x2c, 0x35, 0x76, 0x5b, 0x23, 0xc6, 0x85, 0xba, 0xce, 0x30, 0x6a, 0xac, 0x8c, 0x1b, 0xd7,
		0x4b, 0x66, 0x6f, 0xec, 0x38, 0x5d, 0xc5, 0xa3, 0x72, 0x9e, 0xae, 0x18, 0x99, 0x32, 0x15, 0xd5,
		0x8f, 0x43, 0x1e, 0x26, 0x4d, 0x1b, 0x03, 0x8d, 0x80, 0x46, 0xd5, 0xa2, 0x91, 0xd1, 0xa5, 0xe5,
		0x65, 0xc2, 0xbb, 0x06, 0x1a, 0x01, 0x8d, 0x1c, 0x2d, 0xd9, 0xc5, 0xf9, 0xeb, 0x8b, 0xd7, 0x57,
		0xd7, 0xe7, 0xaf, 0x81, 0x41, 0xb6, 0x18, 0x24, 0xe2, 0x38, 0x8a, 0x79, 0x08, 0x34, 0x6e, 0x0a,
		0xfc, 0x01, 0xfe, 0x00, 0x7f, 0x80, 0x3f, 0xc0, 0x1f, 0xe0, 0x0f, 0x1d, 0x7f, 0x06, 0x69, 0x5f,
		0x4b, 0x3b, 0xef, 0xdc, 0x52, 0x17, 0xc0, 0x23, 0xe0, 0x11, 0xbc, 0x73, 0xc0, 0x23, 0x78, 0xe7,
		0x80, 0x4c, 0x36, 0xc8, 0x14, 0x05, 0x5a, 0x30, 0x11, 0x69, 0xdc, 0x14, 0x48, 0x04, 0x24, 0x02,
		0x12, 0x01, 0x89, 0x80, 0x44, 0x40, 0x22, 0x1b, 0x24, 0x4a, 0x95, 0xa5, 0x85, 0xb4, 0xd0, 0x01,
		0x50, 0x09, 0xa8, 0x04, 0x54, 0x02, 0x2a, 0x01, 0x95, 0x80, 0x4a, 0x76, 0xa8, 0xf4, 0x45, 0x45,
		0xdf, 0x94, 0x37, 0x8c, 0x23, 0x1d, 0x71, 0x71, 0x69, 0xa1, 0x0b, 0x20, 0x13, 0x90, 0xa9, 0x5a,
		0x64, 0xc2, 0x49, 0x12, 0x90, 0x09, 0x27, 0x49, 0x0d, 0xc0, 0xa3, 0x28, 0xd5, 0xd6, 0x17, 0xbd,
		0x0b, 0xfa, 0x00, 0x22, 0x01, 0x91, 0x60, 0x2b, 0x01, 0x91, 0x60, 0x2b, 0x01, 0x9b, 0xac, 0xb0,
		0x89, 0x7f, 0xd5, 0x7b, 0xa1, 0x35, 0xf0, 0x08, 0x78, 0x04, 0x0b, 0x09, 0x78, 0x04, 0x0b, 0x09,
		0x28, 0xc4, 0x40, 0x21, 0xee, 0x65, 0xef, 0xb9, 0xb6, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08,
		0x04, 0x04, 0x02, 0x02, 0x31, 0x10, 0xc8, 0xf6, 0xba, 0x77, 0x41, 0x1f, 0x40, 0x24, 0x20, 0x12,
		0x7c, 0x74, 0x40, 0x24, 0xf8, 0xe8, 0x80, 0x4d, 0x56, 0xd8, 0xc4, 0xbd, 0xf0, 0x3d, 0xd7, 0x16,
		0x58, 0x04, 0x2c, 0x02, 0x16, 0x01, 0x8b, 0x80, 0x45, 0xc0, 0x22, 0x2b, 0x2c, 0xb2, 0xbb, 0xf2,
		0xbd, 0xd2, 0x03, 0x70, 0x09, 0xb8, 0x04, 0x5c, 0x02, 0x2e, 0x01, 0x97, 0x80, 0x4b, 0x8c, 0x27,
		0xb6, 0x25, 0x76, 0x7e, 0xab, 0x54, 0xa4, 0xf3, 0x12, 0x2d, 0x46, 0xf9, 0x9d, 0x93, 0xe0, 0x41,
		0x0c, 0xfc, 0xe1, 0xb4, 0xb4, 0x98, 0xd0, 0x5d, 0x6f, 0xbe, 0xb8, 0x58, 0xc1, 0xcb, 0x17, 0xc6,
		0x09, 0xc2, 0xf3, 0x5f, 0xd0, 0x71, 0x1a, 0xe8, 0x71, 0x2d, 0xad, 0xf6, 0xed, 0xbb, 0x3f, 0xde,
		0xdf, 0x4e, 0x3b, 0xfd, 0x5c, 0xf4, 0xf2, 0xf3, 0xc7, 0x59, 0xff, 0x25, 0xa4, 0x44, 0xd7, 0x26,
		0xf2, 0x74, 0x2a, 0x43, 0x47, 0x4f, 0xa3, 0xaa, 0x17, 0x0a, 0x53, 0x4c, 0xd6, 0x39, 0x14, 0x4a,
		0x4b, 0xfd, 0x48, 0xac, 0xef, 0x67, 0x52, 0xd1, 0xee, 0x76, 0xdc, 0xf5, 0x2f, 0x7e, 0x22, 0x38,
		0x31, 0x1c, 0x93, 0xd2, 0x83, 0x23, 0x92, 0xb5, 0x5d, 0xb8, 0x23, 0xda, 0x37, 0x6b, 0x16, 0x3a,
		0x23, 0xa0, 0x2d, 0xb5, 0xf1, 0xcc, 0xaa, 0x0d, 0x9a, 0x57, 0x19, 0xb4, 0xaa, 0x2e, 0x68, 0x56,
		0x55, 0x70, 0xdd, 0x64, 0x0d, 0x65, 0x2f, 0x47, 0xe6, 0xb6, 0x37, 0xd6, 0x78, 0x20, 0x0a, 0xd8,
		0x62, 0xe2, 0x58, 0xdd, 0xd8, 0xc5, 0x4f, 0x96, 0x66, 0xbd, 0x6d, 0xb6, 0xe6, 0xb3, 0x2c, 0x98,
		0x9b, 0xe9, 0x9c, 0x16, 0x67, 0x32, 0x1b, 0xef, 0xdc, 0x58, 0x67, 0x8c, 0x91, 0x8c, 0x4a, 0xda,
		0xad, 0xb2, 0xd6, 0x2a, 0x0b, 0x4d, 0x9e, 0x5c, 0x9a, 0x71, 0x71, 0xb9, 0x8b, 0xb5, 0xe5, 0x2d,
		0x36, 0xc9, 0xf1, 0xcd, 0x72, 0x7b, 0x9b, 0x9c, 0x36, 0x96, 0xcb, 0xc6, 0x72, 0x78, 0xab, 0xdc,
		0xdd, 0x4c, 0x0b, 0xeb, 0xca, 0x49, 0xcc, 0x96, 0x74, 0xfd, 0x5c, 0x56, 0x56, 0x7f, 0xdd, 0x5c,
		0x36, 0x57, 0x1b, 0xd9, 0x0a, 0xaf, 0x26, 0xb0, 0x6a, 0x06, 0xa7, 0xa6, 0x30, 0x4a, 0x86, 0x4f,
		0x32, 0x6c, 0x1a, 0xc3, 0x25, 0x4d, 0x6a, 0x6f, 0xab, 0x0e, 0xd2, 0xf6, 0xc3, 0x81, 0x54, 0xe4,
		0xb2, 0x92, 0x0b, 0xad, 0xa0, 0x53, 0x41, 0xa7, 0xda, 0xef, 0xba, 0x92, 0x0f, 0xb2, 0xf7, 0xc0,
		0xaa, 0x1f, 0xbe, 0xdc, 0x10, 0xac, 0x00, 0x56, 0x58, 0xd1, 0xe2, 0x47, 0x1a, 0x48, 0x75, 0x65,
		0xc4, 0xf3, 0xdf, 0x43, 0x31, 0xf1, 0xd2, 0x8a, 0x89, 0xcb, 0x4c, 0xfb, 0x0d, 0xc5, 0x77, 0x73,
		0x31, 0x31, 0x6d, 0x01, 0xf9, 0x00, 0xf9, 0x30, 0x93, 0x0f, 0x46, 0x97, 0x70, 0x27, 0x44, 0xf1,
		0xf2, 0xd0, 0xaa, 0x62, 0x9e, 0xa1, 0x2a, 0xe6, 0x64, 0x29, 0xce, 0xcf, 0x2e, 0xae, 0x2f, 0x5e,
		0xbd, 0xbc, 0xba, 0xb8, 0x46, 0x2d, 0xcc, 0x6c, 0x5a, 0x7d, 0x3f, 0xd1, 0x5e, 0xf0, 0x30, 0xa6,
		0x76, 0x43, 0x21, 0x3c, 0xdf, 0x08, 0x72, 0x18, 0x72, 0x98, 0x59, 0x54, 0xb0, 0xdc, 0x32, 0xe0,
		0xd5, 0x16, 0x0f, 0x2c, 0x85, 0x37, 0xa3, 0x6f, 0x2c, 0x53, 0x6a, 0xa9, 0x1d, 0x38, 0x14, 0x1c,
		0x0a, 0x4b, 0xaa, 0xe1, 0x96, 0xd4, 0xf8, 0x54, 0xc0, 0x50, 0x42, 0x6c, 0x38, 0x7a, 0x82, 0x5c,
		0x38, 0x40, 0xb9, 0x90, 0xe8, 0x58, 0xaa, 0x1e, 0x09, 0xb2, 0x4b, 0xa0, 0xe1, 0x68, 0x28, 0x62,
		0xb2, 0xff, 0x7c, 0xbe, 0x11, 0x28, 0x1a, 0x14, 0xbd, 0xdf, 0xee, 0xf3, 0xe1, 0xc3, 0x63, 0xe2,
		0xf9, 0x61, 0x18, 0x8b, 0x84, 0xc0, 0x03, 0x0b, 0xad, 0xc0, 0x04, 0x60, 0x02, 0x3a, 0x5d, 0x94,
		0x6f, 0x8f, 0x1d, 0x7f, 0x3a, 0xf5, 0x5e, 0xfb, 0x5e, 0xf7, 0xad, 0xf7, 0xbe, 0x93, 0x59, 0x5d,
		0x37, 0x8b, 0xef, 0x4f, 0x7e, 0x3a, 0x79, 0xb3, 0x1b, 0x33, 0x2b, 0x19, 0x0a, 0x11, 0x9a, 0x33,
		0x5b, 0xfe, 0x38, 0xb8, 0x0c, 0x5c, 0x36, 0x5e, 0xe7, 0x9e, 0x9f, 0xf6, 0x84, 0xd1, 0x7d, 0x72,
		0xc2, 0x3d, 0xf2, 0x66, 0x39, 0xa0, 0x4f, 0xe1, 0x80, 0x76, 0x77, 0xef, 0xbb, 0xa9, 0xae, 0xe8,
		0xb9, 0x1b, 0xd4, 0xe6, 0xc2, 0xd8, 0xf4, 0xd6, 0xf5, 0x96, 0x8b, 0x52, 0x90, 0xc8, 0xf5, 0x95,
		0xc8, 0xdb, 0x2e, 0x5e, 0x4d, 0x1f, 0x0c, 0x65, 0x12, 0x44, 0x4a, 0x4b, 0x95, 0x4a, 0xfd, 0x98,
		0x3b, 0xa1, 0xc9, 0x37, 0x86, 0x0b, 0xfa, 0x40, 0x70, 0x9a, 0xa9, 0x64, 0x44, 0x70, 0x5a, 0xcb,
		0x2e, 0x38, 0x8d, 0x7a, 0x82, 0xc2, 0xd1, 0xdc, 0xd9, 0x1a, 0xfc, 0xb4, 0x61, 0xb5, 0x27, 0x2b,
		0x66, 0x90, 0x63, 0xbe, 0x93, 0x86, 0xe5, 0x23, 0x6c, 0xb3, 0x75, 0xaf, 0x76, 0x01, 0x39, 0x02,
		0x39, 0x52, 0x91, 0x1c, 0x41, 0x90, 0xab, 0xbd, 0xc6, 0x6e, 0x6b, 0xc4, 0xb8, 0x50, 0xd7, 0x19,
		0x46, 0x8d, 0x95, 0x71, 0xe3, 0x7a, 0xc9, 0x10, 0xe4, 0x5a, 0x02, 0x32, 0xf1, 0x73, 0x75, 0xcf,
		0x37, 0x06, 0x1a, 0x01, 0x8d, 0xaa, 0x45, 0x23, 0x24, 0x4a, 0x05, 0x1a, 0x21, 0x51, 0x6a, 0x33,
		0x30, 0x88, 0x9b, 0xa9, 0x7b, 0xd6, 0x14, 0xf8, 0x03, 0xfc, 0x01, 0xfe, 0x00, 0x7f, 0x80, 0x3f,
		0xc0, 0x1f, 0x3a, 0xfe, 0xd8, 0xe6, 0xe9, 0x5e, 0xed, 0x02, 0x78, 0x04, 0x3c, 0x82, 0x77, 0x0e,
		0x78, 0x04, 0xef, 0x1c, 0x90, 0xc9, 0x06, 0x99, 0xb8, 0x59, 0xba, 0x67, 0x4d, 0x81, 0x44, 0x40,
		0x22, 0x20, 0x11, 0x90, 0x08, 0x48, 0x04, 0x24, 0xb2, 0x41, 0x22, 0xbb, 0x1c, 0xdd, 0xcb, 0x1d,
		0x00, 0x95, 0x80, 0x4a, 0x40, 0x25, 0xa0, 0x12, 0x50, 0x09, 0xa8, 0x64, 0x87, 0x4a, 0x5f, 0x54,
		0xf4, 0x4d, 0x79, 0xc3, 0x38, 0xd2, 0x11, 0x17, 0x97, 0x16, 0xba, 0x00, 0x32, 0x01, 0x99, 0xaa,
		0x45, 0x26, 0x9c, 0x24, 0x01, 0x99, 0x70, 0x92, 0xd4, 0x90, 0x52, 0x46, 0xb6, 0x17, 0xbd, 0x0b,
		0xfa, 0x00, 0x22, 0x01, 0x91, 0x60, 0x2b, 0x01, 0x91, 0x60, 0x2b, 0x01, 0x9b, 0xac, 0xb0, 0x89,
		0x7f, 0xd5, 0x7b, 0xa1, 0x35, 0xf0, 0x08, 0x78, 0x04, 0x0b, 0x09, 0x78, 0x04, 0x0b, 0x09, 0x28,
		0xc4, 0x40, 0x21, 0xee, 0x65, 0xef, 0xb9, 0xb6, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04,
		0x04, 0x02, 0x02, 0x31, 0x10, 0xc8, 0xf6, 0xba, 0x77, 0x41, 0x1f, 0x40, 0x24, 0x20, 0x12, 0x7c,
		0x74, 0x40, 0x24, 0xf8, 0xe8, 0x80, 0x4d, 0x56, 0xd8, 0xc4, 0xbd, 0xf0, 0x3d, 0xd7, 0x16, 0x58,
		0x04, 0x2c, 0x02, 0x16, 0x01, 0x8b, 0x80, 0x45, 0xc0, 0x22, 0x2b, 0x2c, 0xb2, 0xbb, 0xf2, 0xbd,
		0xd2, 0x03, 0x70, 0x09, 0xb8, 0x04, 0x5c, 0x02, 0x2e, 0x01, 0x97, 0x80, 0x4b, 0x8c, 0x27, 0xb6,
		0x25, 0x76, 0x7e, 0xab, 0x54, 0xa4, 0xf3, 0x12, 0x2d, 0x46, 0xf9, 0x9d, 0x93, 0xe0, 0x41, 0x0c,
		0xfc, 0xe1, 0xb4, 0xc0, 0x98, 0xd0, 0x5d, 0x6f, 0x56, 0x62, 0xec, 0xc5, 0x6a, 0xb5, 0xb1, 0x69,
		0xa9, 0x31, 0xe3, 0x34, 0xe1, 0xf9, 0xef, 0xe8, 0x38, 0x0d, 0xf4, 0xb8, 0xa2, 0x56, 0xfb, 0xf6,
		0xdd, 0x1f, 0xef, 0x6f, 0xa7, 0x5d, 0x7f, 0x9e, 0xbd, 0xfc, 0x98, 0xfd, 0xc8, 0xec, 0xfd, 0xe7,
		0x8f, 0xb3, 0x1f, 0x29, 0x21, 0x3b, 0xba, 0x36, 0x11, 0xad, 0x53, 0x71, 0x3a, 0x7a, 0x1a, 0x35,
		0x2a, 0x50, 0xa3, 0x62, 0xb2, 0xce, 0xa1, 0x50, 0x5a, 0xea, 0x47, 0x62, 0xc1, 0x3f, 0x93, 0xe2,
		0x76, 0xb7, 0xe3, 0xae, 0x7f, 0xf1, 0x13, 0xc1, 0x09, 0xe7, 0x98, 0x54, 0x24, 0x1c, 0x91, 0xac,
		0xed, 0xc2, 0x1d, 0xd1, 0xbe, 0x59, 0xb3, 0xd0, 0x19, 0x01, 0x6d, 0x29, 0x93, 0x67, 0x56, 0x78,
		0xd0, 0xbc, 0xe0, 0xa0, 0x55, 0xa1, 0x41, 0xb3, 0x02, 0x83, 0xeb, 0x26, 0x6b, 0x28, 0x86, 0xf9,
		0xe2, 0xb7, 0xbd, 0xb1, 0xe8, 0x03, 0x47, 0xd6, 0x16, 0xd3, 0xc9, 0xea, 0x1e, 0x2f, 0x7e, 0xb2,
		0xb4, 0x00, 0xdb, 0x26, 0x4e, 0x9d, 0x70, 0xc1, 0x34, 0x49, 0xd3, 0x5b, 0x9c, 0xd4, 0x6c, 0xe8,
		0xf9, 0xab, 0xf1, 0xe0, 0xd7, 0x0d, 0xba, 0x2d, 0x93, 0xf7, 0xfe, 0x17, 0xf1, 0x21, 0x8a, 0x56,
		0x25, 0xd7, 0xf2, 0x44, 0xda, 0xf3, 0x5f, 0x2d, 0x0c, 0xf0, 0x57, 0xf1, 0x55, 0x4e, 0x56, 0xf7,
		0xe9, 0xe8, 0xe9, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1d,
		0xcb, 0xbc, 0x4c, 0x12, 0x03, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/controlled-element/administrative-control": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeControl)(0)),
	},
	"/controlled-element/administrative-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeState)(0)),
	},
	"/controlled-element/controlled-function/administrative-control": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeControl)(0)),
	},
	"/controlled-element/controlled-function/administrative-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeState)(0)),
	},
	"/controlled-element/controlled-function/config/administrative-control": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeControl)(0)),
	},
	"/controlled-element/controlled-function/config/administrative-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeState)(0)),
	},
	"/controlled-element/controlled-function/config/lifecycle-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_LifecycleState)(0)),
	},
	"/controlled-element/controlled-function/config/operational-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_OperationalState)(0)),
	},
	"/controlled-element/controlled-function/function-type": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_ControlFunctionType)(0)),
	},
	"/controlled-element/controlled-function/lifecycle-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_LifecycleState)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/administrative-control": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeControl)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/administrative-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeState)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/connection-status": []reflect.Type{
		reflect.TypeOf((E_ORanScRicGnbStatusV1_ConnectionStatusType)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/e2ap-protocol": []reflect.Type{
		reflect.TypeOf((E_ORanScRicGnbStatusV1_E2ApProtocolType)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/lifecycle-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_LifecycleState)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/node": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_ControlElementType)(0)),
	},
	"/controlled-element/controlled-function/nodes/node/operational-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_OperationalState)(0)),
	},
	"/controlled-element/controlled-function/operational-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_OperationalState)(0)),
	},
	"/controlled-element/controlled-function/xapps/xapp/administrative-control": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeControl)(0)),
	},
	"/controlled-element/controlled-function/xapps/xapp/administrative-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_AdministrativeState)(0)),
	},
	"/controlled-element/controlled-function/xapps/xapp/lifecycle-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_LifecycleState)(0)),
	},
	"/controlled-element/controlled-function/xapps/xapp/operational-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_OperationalState)(0)),
	},
	"/controlled-element/lifecycle-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_LifecycleState)(0)),
	},
	"/controlled-element/operational-state": []reflect.Type{
		reflect.TypeOf((E_ORanScTypesV1_OperationalState)(0)),
	},
	"/interfaces-state/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_AdminStatus)(0)),
	},
	"/interfaces-state/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfacesState_Interface_OperStatus)(0)),
	},
	"/interfaces-state/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/admin-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/link-up-down-trap-enable": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_LinkUpDownTrapEnable)(0)),
	},
	"/interfaces/interface/oper-status": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_Interfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/type": []reflect.Type{
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
}

